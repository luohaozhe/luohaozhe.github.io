{"title":"Javascript","uid":"3ba788290cf8ac86f241d1d02e47bb1a","slug":"Javascript/Javascript 基础","date":"2023-08-09T08:19:45.000Z","updated":"2023-08-10T01:42:05.659Z","comments":true,"path":"api/articles/Javascript/Javascript 基础.json","keywords":null,"cover":"/medias/h.jpg","content":"<h2 id=\"数组方法\"><a href=\"#数组方法\" class=\"headerlink\" title=\"数组方法\"></a>数组方法</h2><h3 id=\"字符串转换\"><a href=\"#字符串转换\" class=\"headerlink\" title=\"字符串转换\"></a>字符串转换</h3><pre class=\"line-numbers language-bush\" data-language=\"bush\"><code class=\"language-bush\">1.toString() 把数组转换为数组值（逗号分隔）的字符串\neg:\nconst fruits &#x3D; [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];\ndocument.getElementById(&quot;demo&quot;).innerHTML &#x3D; fruits.toString(); \n\n2.join() 方法也可将所有数组元素结合为一个字符串.(用*进行分割)\neg：\nconst fruits &#x3D; [&quot;Banana&quot;, &quot;Orange&quot;,&quot;Apple&quot;, &quot;Mango&quot;];\ndocument.getElementById(&quot;demo&quot;).innerHTML &#x3D; fruits.join(&quot; * &quot;); \n\n3.自动toString()当在在页面展示时结果与上面一致 自动转换\nconst fruits &#x3D; [&quot;Banana&quot;, &quot;Orange&quot;,&quot;Apple&quot;, &quot;Mango&quot;];\ndocument.getElementById(&quot;demo&quot;).innerHTML &#x3D; fruits.join(&quot; * &quot;);</code></pre>\n\n<h3 id=\"删除数组元素\"><a href=\"#删除数组元素\" class=\"headerlink\" title=\"删除数组元素\"></a>删除数组元素</h3><pre class=\"line-numbers language-bush\" data-language=\"bush\"><code class=\"language-bush\">1.pop() 方法从数组中删除最后一个元素：\n&#x2F;&#x2F; 从 fruits 删除最后一个元素（&quot;Mango&quot;）\nconst fruits &#x3D; [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];\nfruits.pop();  \nconsole.log(fruits);\n\n2.shift() 方法会删除首个数组元素，并把所有其他元素“位移”到更低的索引。\n&#x2F;&#x2F;从 fruits 删除第一个元素 &quot;Banana&quot;\nconst fruits &#x3D; [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];\nfruits.shift();   \n\n3.delete()方法 被删除元素是一个空值empty 不建议使用\nconst fruits &#x3D; [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];\ndelete fruits[0];\nconsole.log(fruits);\n\n4.使用 splice() 来删除元素  splice() 在数组中不留“空洞”的情况下移除元素：\n第一个参数（0）定义新元素应该被添加（接入）的位置。\n第二个参数（1）定义应该删除多个元素。\n其余参数被省略。没有新元素将被添加。\n&#x2F;&#x2F; splice() 方法返回一个包含已删除项的数组：\n    const dynasty &#x3D; [&quot;隋朝&quot;,&quot;唐朝&quot;,&quot;宋朝&quot;,&quot;元朝&quot;,&quot;明朝&quot;,&quot;清朝&quot;];\n    &#x2F;&#x2F; dynasty.splice(2, 0, &quot;北宋&quot;, &quot;南宋&quot;);\n    &#x2F;&#x2F; console.log(dynasty);\n&#x2F;&#x2F;使用splice()删除数组\n&#x2F;&#x2F;删除第一个元素\n&#x2F;&#x2F; dynasty.splice(0, 1);\n&#x2F;&#x2F; 规律: 删除第n个元素   splice(n-1 ,n)\n&#x2F;&#x2F;删除第二个元素 \ndynasty.splice(1, 1);\nconsole.log(dynasty);\n\n</code></pre>\n\n<h3 id=\"添加数组元素\"><a href=\"#添加数组元素\" class=\"headerlink\" title=\"添加数组元素\"></a>添加数组元素</h3><pre class=\"line-numbers language-bush\" data-language=\"bush\"><code class=\"language-bush\">1.push() 方法（在数组结尾处）向数组添加一个新的元素：\nconst fruits &#x3D; [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];\nfruits.posh();  \nconsole.log(fruits);\n\n2.unshift() 方法（在开头）向数组添加新元素，并“反向位移”旧元素\nconst fruits &#x3D; [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];\nfruits.unshift();  \nconsole.log(fruits);\n\n3. splice() 方法可用于向数组添加新项：\n第一个参数（3）定义了应添加新元素的位置（拼接）。\n\n第二个参数（0）定义应删除多少元素。\n\n其余参数（“高一”，“”）定义要添加的新元素。\n\nsplice() 方法返回一个包含已删除项的数组：\n\nconst Class&#x3D; [&quot;初一&quot;,&quot;初二&quot;,&quot;初三&quot;,&quot;高二&quot;,&quot;高三&quot;,];\nClass.splice(3, 0, &quot;高一&quot;);\nconsole.log(Class);</code></pre>\n\n<h2 id=\"修改数组元素\"><a href=\"#修改数组元素\" class=\"headerlink\" title=\"修改数组元素\"></a>修改数组元素</h2><pre class=\"line-numbers language-bush\" data-language=\"bush\"><code class=\"language-bush\">1.通过索引号来修改数组的值\nconst fruits &#x3D; [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];\nfruits[0] &#x3D; &quot;Kiwi&quot;;  \n\n2.</code></pre>\n\n<h2 id=\"数组拼接\"><a href=\"#数组拼接\" class=\"headerlink\" title=\"数组拼接\"></a>数组拼接</h2><pre class=\"line-numbers language-bush\" data-language=\"bush\"><code class=\"language-bush\">1.splice() 方法可用于向数组添加新项：\n\n2.concat() 方法通过合并（连接）现有数组来创建一个新数组：\nconcat() 方法不会更改现有数组。它总是返回一个新数组。\nconcat() 方法可以使用任意数量的数组参数：\n\n合并多个数组\nconst myGirls &#x3D; [&quot;Cecilie&quot;, &quot;Lone&quot;];\nconst myBoys &#x3D; [&quot;Emil&quot;, &quot;Tobias&quot;, &quot;Linus&quot;];\nconst myChildren &#x3D; myGirls.concat(myBoys, &#39;要连接的数组名&#39;);   &#x2F;&#x2F; 连接 myGirls 和 myBoys\n\n&#x2F;&#x2F;concat() 合并连接多个数组，中间用,分割\nconst Food &#x3D;[&quot;热干面&quot;,&quot;安徽板面&quot;,&quot;重庆小面&quot;,&quot;过桥米线&quot;,&quot;油泼面&quot;];\nconst citys &#x3D; [&quot;武汉&quot;,&quot;安徽&quot;,&quot;重庆&quot;,&quot;云南&quot;,&quot;河南&quot;];\nconst idol &#x3D; [&quot;吴亦凡&quot;,&quot;李易峰&quot;,&quot;陈飞宇&quot;,&quot;王一博&quot;,&quot;肖战&quot;];\nlet Pasta &#x3D;  Food.concat(citys, idol);\nconsole.log(Pasta);\nconcat() 方法也可以将值作为参数：\nlet Pasta &#x3D;  Food.concat([&quot;吴亦凡&quot;,&quot;李易峰&quot;,&quot;陈飞宇&quot;,&quot;王一博&quot;,&quot;肖战&quot;]);\n\n3.</code></pre>\n\n<h3 id=\"剪切数组\"><a href=\"#剪切数组\" class=\"headerlink\" title=\"剪切数组\"></a>剪切数组</h3><pre class=\"line-numbers language-bush\" data-language=\"bush\"><code class=\"language-bush\">1.slice() 方法用数组的某个片段切出新数组 slice()不会改变源数组的值\neg:\n从索引值1 开始剪切数组\nconst fruits &#x3D; [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Lemon&quot;, &quot;Apple&quot;, &quot;Mango&quot;];\nconst citrus &#x3D; fruits.slice(1); \n也可以传两个参数\nslice(3,7)\n从索引值为3开始 7结束新数组不包含7的值\nconst fruits &#x3D; [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Lemon&quot;, &quot;Apple&quot;, &quot;Mango&quot;];\nconst citrus &#x3D; fruits.slice(1, 7);\nconsole.log(citrus);\n</code></pre>\n\n<h3 id=\"数组排序\"><a href=\"#数组排序\" class=\"headerlink\" title=\"数组排序\"></a>数组排序</h3><pre class=\"line-numbers language-bush\" data-language=\"bush\"><code class=\"language-bush\">1. sort() 方法是最强大的数组方法之一。\nsort() 方法以字母顺序对数组进行排序：\nconst fruits &#x3D; [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Lemon&quot;, &quot;Apple&quot;, &quot;Mango&quot;];\nfruits.sort();\nconsole.log(fruits);\n\n2.reverse() 方法反转数组中的元素。 您可以使用它以降序对数组进行排序：\nconst fruits &#x3D; [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Lemon&quot;, &quot;Apple&quot;, &quot;Mango&quot;];\nfruits.reverse();\nconsole.log(fruits);\n\n3.数字排序\n默认地，sort() 函数按照字符串顺序对值进行排序。\n\n该函数很适合字符串（&quot;Apple&quot; 会排在 &quot;Banana&quot; 之前）。\n\n不过，如果数字按照字符串来排序，则 &quot;25&quot; 大于 &quot;100&quot;，因为 &quot;2&quot; 大于 &quot;1&quot;。\n\n正因如此，sort() 方法在对数值排序时会产生不正确的结果。\n\n我们通过一个比值函数来修正此问题：\n从小到大\nconst points &#x3D; [40, 100, 1, 5, 25, 10];\npoints.sort(function(a, b)&#123;return a - b&#125;); \n\n从大到小\nconst points &#x3D; [40, 100, 1, 5, 25, 10];\npoints.sort(function(a, b)&#123;return b - a&#125;); \n\n4.比值函数 比较函数的目的是定义另一种排序顺序。\n比较函数应该返回一个负，零或正值，这取决于参数：\neg：\n当比较 40 和 100 时，sort() 方法会调用比较函数 function(40,100)。\n\n该函数计算 40-100，然后返回 -60（负值）。\n\n排序函数将把 40 排序为比 100 更低的值。\n\n5.排序对象数组\neg：\nconst cars &#x3D; [\n        &#123;type: &#39;Volvo&#39;, year: 2016&#125;,\n        &#123;type: &#39;Saab&#39;, year: 2001&#125;,\n        &#123;type: &#39;BWM&#39;, year: 2010&#125;\n     ];\n\n     displayCars();\n\n     function MyFunction () &#123;cars.sort(function (a,b) &#123;\n      return a.year - b.year\n      \n      &#125;);\n      displayCars();\n        &#125; \n     function displayCars () &#123;\n        document.getElementById(&#39;result&#39;).innerHTML &#x3D;\n        cars[0].type + &quot; &quot; + cars[0].year + &quot;&lt;br&gt;&quot; +\n        cars[1].type + &quot; &quot; + cars[1].year + &quot;&lt;br&gt;&quot; +\n        cars[2].type + &quot; &quot; + cars[2].year;\n    &#125;</code></pre>\n\n<h3 id=\"查找最高（或最低）的数组值\"><a href=\"#查找最高（或最低）的数组值\" class=\"headerlink\" title=\"查找最高（或最低）的数组值\"></a>查找最高（或最低）的数组值</h3><pre class=\"line-numbers language-bush\" data-language=\"bush\"><code class=\"language-bush\">1.sort（）方法\neg：\nconst point &#x3D; [1, 10, 46, 30, 79, 50, 2];\n        &#x2F;&#x2F; 升序 最小值：[0] 最大值 [length -1]\n        point.sort(function(a,b)&#123; return (a - b)&#125; );\n        document.getElementById(&#39;result&#39;).innerHTML &#x3D; point;\n        document.getElementById(&#39;max&#39;).innerHTML &#x3D; point[point.length - 1];\n        document.getElementById(&#39;min&#39;).innerHTML &#x3D; point[0];\n        \n        \nconst point &#x3D; [1, 10, 46, 30, 79, 50, 2];\n        &#x2F;&#x2F; 降序 最大值：[0] 最小值 [length -1]\n        point.sort(function(a,b)&#123; return (a - b)&#125; );\n        document.getElementById(&#39;result&#39;).innerHTML &#x3D; point;\n        document.getElementById(&#39;min&#39;).innerHTML &#x3D; point[point.length - 1];\n        document.getElementById(&#39;max&#39;).innerHTML &#x3D; point[0];\n2.使用 Math.max.apply 来查找数组中的最高值： Math.min.apply 来查找数组中的最低值：\neg：\n\n const point &#x3D; [1, 10, 46, 30, 79, 50, 2];\n        document.getElementById(&#39;demo&#39;).innerHTML &#x3D; MyArrayMax(point);\n        function MyArrayMax(arr) &#123;\n            return Math.max.apply(null, arr)\n        &#125;;\n        \n        function MyArrayMin(arr) &#123;\n            return Math.min.apply(null, arr)\n        &#125;;\n        document.getElementById(&#39;demos&#39;).innerHTML &#x3D; MyArrayMin(point);\n\n3.自制方法\n此函数遍历数组，用找到的最高值与每个值进行比较：\neg：\nconst point &#x3D; [1, 10, 46, 30, 79, 50, 2];\n       function MyArrayMax (arr) &#123;\n          let len &#x3D; arr.length\n          let max &#x3D; -Infinity;\n          while (len--) &#123;\n            if(arr[len] &gt; max) &#123;\n                max &#x3D; arr[len];\n            &#125;\n          &#125;\n          return max;\n       &#125; \n      \n       document.getElementById(&#39;demo&#39;).innerHTML &#x3D; MyArrayMax(point);   \n\n       function MyArrayMin (arr) &#123;\n          let len &#x3D; arr.length\n          let min &#x3D; Infinity;\n          while (len--) &#123;\n            if(arr[len] &lt; min) &#123;\n                min &#x3D; arr[len];\n            &#125;\n          &#125;\n          return min;\n       &#125; \n      \n       document.getElementById(&#39;demos&#39;).innerHTML &#x3D; MyArrayMin(point);   \n    </code></pre>\n\n<h3 id=\"数组迭代\"><a href=\"#数组迭代\" class=\"headerlink\" title=\"数组迭代\"></a>数组迭代</h3><pre class=\"line-numbers language-bush\" data-language=\"bush\"><code class=\"language-bush\">数组迭代方法对每个数组项进行操作。\n1.forEach() 方法为每个数组元素调用一次函数（回调函数）。\n：该函数接受 3 个参数：\n\n项目值\n项目索引\n数组本身\n  let txt &#x3D; &#39;&#39;;\n        const num &#x3D; [12,334,32134,4234,435,53535];\n        num.forEach(Function);\n        document.getElementById(&#39;result&#39;).innerHTML &#x3D; txt;\n        \n        function Function (value, index, array) &#123;\n                txt &#x3D; txt + value + &quot;&lt;br&gt;&quot;\n        &#125;\n\n2.Array.map()\nmap() 方法通过对每个数组元素执行函数来创建新数组。\nmap() 方法不会对没有值的数组元素执行函数。\nmap() 方法不会更改原始数组。\neg：\nconst num &#x3D; [12,334,32134,4234,435,53535];\n        let newNum &#x3D; num.map(MyFunction);\n\n       function  MyFunction (value, index, array) &#123;\n                return value * 2;\n        &#125;\n        document.getElementById(&#39;result&#39;).innerHTML &#x3D; newNum;\n\n3.Array.filter() 创建一个通过测试的元素组成的新数组\neg：\n返回值大于46547的新数组\n    const figures &#x3D; [1231,4132,41254123,23154235,235634,23554];\n    let NewFigures &#x3D; figures.filter(MyFunction);\n    function MyFunction (value, index, array) &#123;\n            return value &gt; 46547;\n    &#125;\n    document.getElementById(&#39;result&#39;).innerHTML &#x3D; NewFigures;\n    \n4.Array.reduce()\nreduce() 方法在每个数组元素上运行函数，以生成（减少它）单个值。\nreduce() 方法在数组中从左到右工作。\nreduce() 方法不会减少原始数组。\n函数接受4个参数\n总数（初始值&#x2F;先前返回的值）\n项目值\n项目索引\n数组本身\neg:\n&#x2F;&#x2F;数组求和\nconst num &#x3D; [48364923,432423,4235,56346,7654,754,7547,54754,7745,754];\n    let sum &#x3D; num.reduce(MyFunction, 100);&#x2F;&#x2F;可设置初始值\n    function MyFunction (total, value, index, array)  &#123;\n           return total + value;\n    &#125;;\n    document.getElementById(&#39;result&#39;).innerHTML &#x3D; sum;\n    \n5.Array.reduceRight()\nreduceRight() 方法在每个数组元素上运行函数，以生成（减少它）单个值。\nreduceRight() 方法在数组中从右到左工作。\nreduceRight() 方法不会减少原始数组。\n&#x2F;&#x2F; reduceRight() \n    &#x2F;&#x2F;数组值相加\n    const num &#x3D; [48364923,432423,4235,56346];\n    let sum &#x3D; num.reduceRight(MyFunction);\n    \n    function MyFunction (total, value, index, array) &#123;\n        return total + value;\n    &#125;;\n    document.getElementById(&#39;result&#39;).innerHTML &#x3D; sum;\n\n6.Array.every()\nevery() 方法检查所有数组值是否通过测试。\neg：\n &#x2F;&#x2F;判读数组所有元素是否都大于500 返回布尔值\n    const num &#x3D; [34123,4123,423,423,53,425,345];\n    let newNum &#x3D; num.every(MyFunction);\n    function MyFunction (value, index, array) &#123;\n          return value &gt; 500\n    &#125;\n    document.getElementById(&#39;result&#39;).innerHTML &#x3D; newNum;\n \n7.Array.some() some() 方法检查某些数组值是否通过了测试。 \n检查数组中是否有元素大于 500 返回布尔值\n     const num &#x3D; [3213412,423,5634,6,7,856,8967,876,9];\n     let Newnum &#x3D; num.some(MyFunction);\n     function MyFunction (value, index, array) &#123;\n        return value &gt; 90;\n\n     &#125;\n      document.getElementById(&#39;result&#39;).innerHTML &#x3D; Newnum;\n\n8.Array.indexOf()方法在数组中搜索元素值并返回其位置。\n语法\narray.indexOf(item, start)\nitem\t必需。要检索的项目。\nstart\t可选。从哪里开始搜索。负值将从结尾开始的给定位置开始，并搜索到结尾。\n如果未找到项目，Array.indexOf() 返回 -1。\n如果项目多次出现，则返回第一次出现的位置。\neg：\nconst num &#x3D; [3213412,423,423,423,4325,34,63467547,54785];\n    let index &#x3D; num.indexOf(423);\n    document.getElementById(&#39;result&#39;).innerHTML &#x3D; index;\n\n9.Array.lastIndexOf()与indexOf()方法相似不过是从结尾开始搜索\n   const num &#x3D; [3213412,423,423,423,4925,34,63467547,54785];\n    let index &#x3D; num.lastIndexOf(423);\n\n10.Array.find() 方法返回通过测试函数的第一个数组元素的值。\n const num &#x3D; [3213412,423,234523,523,563464567547658658,568658,65];\n    let first &#x3D; num.find(MyFunction);\n    function MyFunction (value, index, array) &#123;\n        return value &gt; 4235;\n    &#125;\n    document.getElementById(&#39;result&#39;).innerHTML &#x3D; first;\n    \n11. findIndex() 方法返回通过测试函数的第一个数组元素的索引\n    const num &#x3D; [3213412,423,234523,523,56346456];\n    let index &#x3D; num.findIndex(MyFunction);\n    function MyFunction (value, index, array) &#123;\n        return value &gt; 42523;\n    &#125;\n    document.getElementById(&#39;result&#39;).innerHTML &#x3D; index;</code></pre>\n\n<h2 id=\"JavaScript日期\"><a href=\"#JavaScript日期\" class=\"headerlink\" title=\"JavaScript日期\"></a>JavaScript日期</h2><pre class=\"line-numbers language-bush\" data-language=\"bush\"><code class=\"language-bush\">创建 Date 对象\nDate 对象由新的 Date() 构造函数创建。\n有 4 种方法创建新的日期对象：\nnew Date()\nnew Date(year, month, day, hours, minutes, seconds, milliseconds)\nnew Date(milliseconds)\nnew Date(date string)\n\neg:\n1. 输出当前时间\n     let d &#x3D; new Date();\n     document.getElementById(&#39;result&#39;).innerHTML &#x3D; d\n     toDateString() 方法将日期转换为更易读的格式：\n    document.getElementById(&#39;result&#39;).innerHTML &#x3D; d.toDateString();\n2.日期格式\n类型\t实例\nISO 日期\t&quot;2018-02-19&quot; （国际标准）\n短日期\t&quot;02&#x2F;19&#x2F;2018&quot; 或者 &quot;2018&#x2F;02&#x2F;19&quot;\n长日期\t&quot;Feb 19 2018&quot; 或者 &quot;19 Feb 2019&quot;\n完整日期\t&quot;Monday February 25 2015&quot;\n</code></pre>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">类型</th>\n<th align=\"center\">示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">ISO日期</td>\n<td align=\"center\">“2018-02-19” （国际标准）</td>\n</tr>\n<tr>\n<td align=\"center\">短日期</td>\n<td align=\"center\">“02&#x2F;19&#x2F;2018” 或者 “2018&#x2F;02&#x2F;19”</td>\n</tr>\n<tr>\n<td align=\"center\">长日期</td>\n<td align=\"center\">“Feb 19 2018” 或者 “19 Feb 2019”</td>\n</tr>\n<tr>\n<td align=\"center\">完整日期</td>\n<td align=\"center\">“Monday February 25 2015”</td>\n</tr>\n</tbody></table>\n<h2 id=\"日期输入格式\"><a href=\"#日期输入格式\" class=\"headerlink\" title=\"日期输入格式\"></a>日期输入格式</h2><h2 id=\"日期获取方法\"><a href=\"#日期获取方法\" class=\"headerlink\" title=\"日期获取方法\"></a>日期获取方法</h2><table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">getDate()</td>\n<td align=\"left\">以数值返回天（1-31）</td>\n</tr>\n<tr>\n<td align=\"left\">getDay()</td>\n<td align=\"left\">以数值获取周名（0-6）</td>\n</tr>\n<tr>\n<td align=\"left\">getFullYear()</td>\n<td align=\"left\">获取四位的年（yyyy）</td>\n</tr>\n<tr>\n<td align=\"left\">getHours()</td>\n<td align=\"left\">获取小时（0-23）</td>\n</tr>\n<tr>\n<td align=\"left\">getMilliseconds()</td>\n<td align=\"left\">获取毫秒（0-999）</td>\n</tr>\n<tr>\n<td align=\"left\">getMinutes()</td>\n<td align=\"left\">获取分（0-59）</td>\n</tr>\n<tr>\n<td align=\"left\">getMonth()</td>\n<td align=\"left\">获取月（0-11）</td>\n</tr>\n<tr>\n<td align=\"left\">getSeconds()</td>\n<td align=\"left\">获取秒（0-59）</td>\n</tr>\n<tr>\n<td align=\"left\">getTime()</td>\n<td align=\"left\">获取时间（从 1970 年 1 月 1 日至今）</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-bush\" data-language=\"bush\"><code class=\"language-bush\">&#x2F;&#x2F; getTime() 方法  返回毫秒数\n    let d &#x3D; new Date();\n    document.getElementById(&#39;result&#39;).innerHTML &#x3D; d.getTime();\n\n    &#x2F;&#x2F;getFullYear() 方法  返回年\n    document.getElementById(&#39;result&#39;).innerHTML &#x3D; d.getFullYear();\n \n    &#x2F;&#x2F;getMonth() 方法 在 JavaScript 中，第一个月（1 月）是月号 0，因此 12 月返回月号 11。\n    &#x2F;&#x2F;要获取正确的月份需要加一\n    document.getElementById(&#39;result&#39;).innerHTML &#x3D; d.getMonth() + 1;\n   \n    &#x2F;&#x2F;getDate() 方法 以数字（1-31）返回日期的日\n    document.getElementById(&#39;result&#39;).innerHTML &#x3D; d.getDate();\n   \n    &#x2F;&#x2F;getHours() 方法 以数字(0-23)返回日期的小时数\n    document.getElementById(&#39;result&#39;).innerHTML &#x3D; d.getHours();\n    \n    &#x2F;&#x2F;getMinutes() 返回 （0-59）返回分钟\n    document.getElementById(&#39;result&#39;).innerHTML &#x3D; d.getMinutes();\n    \n    &#x2F;&#x2F; getSeconds()方法 返回秒\n    document.getElementById(&#39;result&#39;).innerHTML &#x3D; d.getSeconds();\n     \n    &#x2F;&#x2F;getMilliseconds() 方法 返回日期的毫秒数\n    document.getElementById(&#39;result&#39;).innerHTML &#x3D; d.getMilliseconds();\n\n    &#x2F;&#x2F; getDay()方法 返回（0-6）日期的星期名\n    document.getElementById(&#39;result&#39;).innerHTML &#x3D; d.getDay();\n</code></pre>\n\n<h2 id=\"数据监视原理总结\"><a href=\"#数据监视原理总结\" class=\"headerlink\" title=\"数据监视原理总结\"></a>数据监视原理总结</h2><pre class=\"line-numbers language-bush\" data-language=\"bush\"><code class=\"language-bush\">&lt;div id&#x3D;&quot;root&quot;&gt;\n        &lt;!-- 总结  Vue 监视数据的原理\n        1.vue会监视data中所有层次的数据\n\n\n        2.如何监测对象中的数据\n            通过setter实现监视, 且要再new Vue时就传入要监测的数据\n            (1).对象中后追加的属性,vue默认不做响应式数据\n            (2).如需给后续添加的属性做响应式请使用如下API\n            Vue.set(target, propertyName&#x2F;index , value)\n            Vue.$set(target, propertyName&#x2F;index , value)\n\n        3.如何监测数组中的数据\n             通过包裹数组更新元素的方法实现 本质就是做了两件事\n             (1)调用原生对印的方法对数组进行更新\n             (2)重新解析模板进而更新页面\n    \n        4.在Vue修改数组的某个元素一定要用如下方法\n             (1).使用这些API: push()数组末尾添加 pop() 数组末尾删除\n                 unshift()数组开头添加一个元素  shift()删除数组第一个元素\n                 splice(0,1 &#x2F;&#x2F;要截取的范围, &#39;要更换的元素&#39;)   截取数组\n                 sort() 数组排序 以上方法均会改变原数组\n                 1.1 对于 filter() 不改变源数组的方法可以将过滤后的数据赋值给源数组实现\n             (2).Vue.set(要修改的数组, &#39;要修改的值&#39;) \n                Vue.$set(要修改的数组, &#39;要修改的值&#39;) \n          特别注意:\n             Vue.set()和Vue.$set() 不能给vm 或vm的根数据对象_data 添加属性\n\n\n                  --&gt;\n\n        &lt;h2&gt;学生信息&lt;&#x2F;h2&gt;\n        &lt;br&gt;\n        &lt;button @click.once&#x3D;&quot;addSet&quot;&gt;更改朋友信息&lt;&#x2F;button&gt;\n        &lt;button @click.once&#x3D;&quot;filter&quot;&gt;过滤小蔡&lt;&#x2F;button&gt;\n         &lt;h2&gt;朋友们:&lt;&#x2F;h2&gt;\n         &lt;li v-for&#x3D;&quot;(f, index) in friend&quot;&gt;\n            &#123;&#123;f&#125;&#125;\n         &lt;&#x2F;li&gt;\n         &lt;h2&gt;偶像们&lt;&#x2F;h2&gt;\n        &lt;li v-for&#x3D;&quot;(I, index) in Idol&quot; :key&#x3D;&quot;index&quot;&gt;\n           &#123;&#123;I.name&#125;&#125; --&#123;&#123;I.age&#125;&#125;\n        &lt;&#x2F;li&gt;\n    &lt;&#x2F;div&gt;\n    &lt;script&gt;\n        const vm &#x3D; new Vue(&#123;\n            data() &#123;\n                return &#123;\n                    student:&#123;\n                    name: &#39;小蔡&#39;,\n                    &#125;,\n                    age:&#123;\n                        rage: 40,\n                        fage: 30\n                    &#125;,\n                    friend:[&#39;jack&#39;,&#39;tony&#39;,&#39;lad&#39;, &#39;xie&#39;,&#39;chen&#39;],\n                    Idol:[\n                        &#123;name: &#39;小蔡&#39;,age: 30&#125;,\n                        &#123;name: &#39;小吴&#39;,age: 31&#125;\n                    ]\n                &#125;\n            &#125;,\n            methods: &#123;\n                addSet() &#123;&#x2F;&#x2F;要填加的数组名  索引值  value\n                &#x2F;&#x2F;    Vue.set(this.friend, &#39;0&#39;, &#39;mail&#39;) &#x2F;&#x2F;使用set修改\n                &#x2F;&#x2F; this.friend.push(&#39;mail&#39;)&#x2F;&#x2F;向数组末尾添加元素\n                &#x2F;&#x2F; this.Idol[0].name &#x3D; &#39;小李&#39; &#x2F;&#x2F;修改数组第一个元素对象的name属性\n                &#x2F;&#x2F;  this.Idol.unshift(&#123;name: &#39;小周&#39;, age:28&#125;) &#x2F;&#x2F;向数组开头添加一个元素对象\n                this.friend.splice(0,1,&#39;luo&#39;) &#x2F;&#x2F;修改数组friend中的第一个元素为luo\n            &#125;,\n            filter() &#123;\n                 this.Idol &#x3D;  this.Idol.filter((f) &#x3D;&gt; &#123;\n                   return f.name !&#x3D;&#x3D; &#39;小蔡&#39;;\n              &#125;)\n            &#125;\n            &#125;,\n        &#125;)\n        vm.$mount(&#39;#root&#39;)\n    &lt;&#x2F;script&gt;</code></pre>\n\n<h2 id=\"表单数据收集\"><a href=\"#表单数据收集\" class=\"headerlink\" title=\"表单数据收集\"></a>表单数据收集</h2><pre class=\"line-numbers language-bush\" data-language=\"bush\"><code class=\"language-bush\">&lt;div id&#x3D;&quot;root&quot;&gt;\n      &lt;!-- 收集表单数据 \n      1. 普通输入框&lt;input type&#x3D;&quot;text&quot;&gt;,则v-model收集的是value,用户输入的就是value值\n      2.当选框 &lt;input type&#x3D;&quot;text&quot;&gt;则v-model收集的是value值 且要给标签配置value\n      3.多选框 &lt;input type&#x3D;&quot;checkbox&quot;&gt;\n         3.1没有配置input的value属性,那么收集的就是check (勾选 or 未勾选 是布尔值)\n         3.2配置input的value属性\n           (1)v-model的初始值是非数组,那么收集的就是check (勾选 or 未勾选 是布尔值)\n           (2)v-model的初始值是数组那么收集的就是value组成的数组\n\n           备注: v-model 的三个修饰符\n           lazy: 失去焦点在收集数据 --适用于数据较多懒加载\n           number: 将输入的含字符串的值转为纯数字 --适用于只允许含有数字的输入\n           trim: 输入框首尾空格过滤\n\n       --&gt;\n\n\n\n\n       &lt;!-- action 数据要提交的服务器地址 --&gt;\n       &lt;form action&#x3D;&quot;&quot; @submit.prevent&#x3D;&quot;demo&quot;&gt;\n        &lt;label for&#x3D;&quot;Phone&quot;&gt;账号:&lt;&#x2F;label&gt;trem\n        &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;Phone&quot; v-model.trim&#x3D;&quot;userInfo.Phone&quot;&gt;\n         &lt;br&gt;&lt;br&gt;\n        &lt;label for&#x3D;&quot;Password&quot;&gt;密码:&lt;&#x2F;label&gt;\n        &lt;input type&#x3D;&quot;password&quot; id&#x3D;&quot;Password&quot; v-model&#x3D;&quot;userInfo.Password&quot;&gt;\n        \n        &lt;br&gt;&lt;br&gt;\n        &lt;label for&#x3D;&quot;age&quot;&gt;年龄:&lt;&#x2F;label&gt;\n        &lt;input type&#x3D;&quot;number&quot; id&#x3D;&quot;age&quot; v-model.number&#x3D;&quot;userInfo.age&quot;&gt;\n\n\n        &lt;br&gt;&lt;br&gt;\n        性别: \n        男&lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;sex&quot; v-model&#x3D;&quot;userInfo.sex&quot; value&#x3D;&quot;man&quot;&gt;\n        女&lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;sex&quot; v-model&#x3D;&quot;userInfo.sex&quot; value&#x3D;&quot;woman&quot;&gt;\n        \n        &lt;br&gt;&lt;br&gt;\n        特长：\n        唱跳 &lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;userInfo.expertise&quot; value&#x3D;&quot;唱跳&quot;&gt;\n        Rap  &lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;userInfo.expertise&quot; value&#x3D;&quot;Rap&quot;&gt;\n        篮球 &lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;userInfo.expertise&quot; value&#x3D;&quot;篮球&quot;&gt;\n        &lt;br&gt;&lt;br&gt;\n\n       所属校区:\n       &lt;select v-model&#x3D;&quot;userInfo.city&quot;&gt;\n           &lt;option value&#x3D;&quot;&quot;&gt;请选择校区&lt;&#x2F;option&gt;\n           &lt;option value&#x3D;&quot;beijing&quot;&gt;北京&lt;&#x2F;option&gt;\n           &lt;option value&#x3D;&quot;shanghai&quot;&gt;上海&lt;&#x2F;option&gt;\n           &lt;option value&#x3D;&quot;shenzhen&quot;&gt;深圳&lt;&#x2F;option&gt;\n           &lt;option value&#x3D;&quot;wuhan&quot;&gt;武汉&lt;&#x2F;option&gt;\n       &lt;&#x2F;select&gt;\n       &lt;br&gt;&lt;br&gt;\n       其他信息：              \n       &lt;textarea cols&#x3D;&quot;30&quot; rows&#x3D;&quot;10&quot; v-model.lazy&#x3D;&quot;userInfo.other&quot;&gt;&lt;&#x2F;textarea&gt;\n        \n       &lt;br&gt;&lt;br&gt;\n      &lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;userInfo.agree&quot;&gt; 阅读并接受 &lt;a href&#x3D;&quot;#&quot;&gt;《用户协议》&lt;&#x2F;a&gt;\n      &lt;br&gt;&lt;br&gt;\n      &lt;button&gt;提交&lt;&#x2F;button&gt;\n   &lt;&#x2F;form&gt;\n\n   &lt;&#x2F;div&gt;\n\n   &lt;script&gt;\n       Vue.config.productionTip &#x3D; false;\n     const vm &#x3D; new Vue(&#123;\n        data() &#123;\n           return &#123;\n               userInfo:&#123;\n               Phone: &#39;&#39;,\n               Password: &#39;&#39;,\n               age: 18,\n               sex:&#39;man&#39;,\n               expertise:[&#39;唱跳&#39;], &#x2F;&#x2F;初始值为数组\n               city:&#39;beijing&#39;,\n               other:&#39;&#39;,\n               agree:&#39;&#39;,\n               &#125;,\n               \n           &#125;\n        &#125;,\n        methods: &#123;\n           demo() &#123;&#x2F;&#x2F;将收集的数据转换成字符串输出\n              console.log(JSON.stringify(this.userInfo));\n           &#125;\n        &#125;,\n           \n           \n     &#125;) \n     vm.$mount(&#39;#root&#39;)\n   &lt;&#x2F;script&gt;</code></pre>\n\n<h2 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h2><pre class=\"line-numbers language-bush\" data-language=\"bush\"><code class=\"language-bush\">&lt;div id&#x3D;&quot;root&quot;&gt;\n        &lt;!-- 过滤器:\n        定义： 对要显示的数据进行特定格式化的显示（适用于一些简单逻辑的处理）\n        语法：\n          1.注册过滤器 Vue.filter(过滤器name,function(value)&#123;&#125;)  或 new Vue (&#123;\n           filters:&#123;\n               过滤器name()&#123;\n\n               &#125;\n           &#125;\n          &#125;)\n      \n       使用过滤器：\n       &#123;&#123;要过滤的data元素 | 过滤器name&#125;&#125; 或 v-bind: &#x3D; &quot;要过滤的data元素 | 过滤器名&quot;\n        \n       备注：\n         1.过滤器也可以接收额外参数，多个过滤可串联\n         2.并没有改变原有的数据，是产生了新的相应数据 --&gt;\n\n\n       &lt;h2&gt;显示格式化后的时间&lt;&#x2F;h2&gt;\n         &lt;h3&gt;格式化前的当前时间是:&#123;&#123;Date.now()&#125;&#125;&lt;&#x2F;h3&gt;\n         &lt;!-- computed实现 --&gt;\n         &lt;h3&gt;格式化后的时间是:&#123;&#123;FormatTime&#125;&#125;&lt;&#x2F;h3&gt;\n\n         &lt;!-- methods 实现 --&gt;\n         &lt;h3&gt;现在的时间是:&#123;&#123;getFormatTime()&#125;&#125;&lt;&#x2F;h3&gt;\n\n         &lt;!-- 过滤器实现    要展示的数据 | 过滤器名(自定义)--&gt;\n         &lt;h3&gt;现在的时间是:&#123;&#123;time | timeFormat&#125;&#125;&lt;M&#x2F;h3&gt;\n\n         &lt;!-- 过滤器传参 多个过滤器串联--&gt;\n         &lt;h3&gt;现在的时间是: &#123;&#123;time | timeFormat(&#39;YYYY-MM-DD&#39;) | mySlice&#125;&#125;&lt;&#x2F;h3&gt;\n   &lt;&#x2F;div&gt;\n\n   &lt;script&gt;\n       Vue.config.productionTip &#x3D; false;\n       &#x2F;&#x2F;全局过滤器\n       &#x2F;&#x2F; Vue.filter(timeFormat,function(value) &#123;\n       &#x2F;&#x2F;     return dayjs(value).format(&#39;YYYY-MM-DD&#39;)\n       &#x2F;&#x2F; &#125;)\n       const vm &#x3D; new Vue(&#123;\n           data() &#123;\n               return &#123;\n                 time: &#39;1679060999540&#39; \n               &#125;\n           &#125;,\n           methods: &#123;\n               getFormatTime()&#123;\n                   return dayjs().format(&#39;YYYY年MM月DD日 HH:mm:ss&#39;)\n               &#125;\n           &#125;,\n           computed:&#123;\n               FormatTime() &#123;\n                  return dayjs().format(&#39;YYYY年MM月DD日 HH:mm:ss&#39;)\n               &#125;,\n           &#125;,\n           &#x2F;&#x2F;局部过滤器\n           filters:&#123;\n               timeFormat(value, str&#x3D;&#39;YYYY年MM月DD日 HH:mm:ss&#39;) &#123;\n                  return dayjs().format(str)\n               &#125;,\n               mySlice(value) &#123;\n                   return value.slice(0,4)\n               &#125;\n           &#125;\n       &#125;);\n       vm.$mount(&#39;#root&#39;)\n   &lt;&#x2F;script&gt;</code></pre>\n\n<h2 id=\"内置指令\"><a href=\"#内置指令\" class=\"headerlink\" title=\"内置指令\"></a>内置指令</h2>","feature":true,"text":"数组方法字符串转换1.toString() 把数组转换为数组值（逗号分隔）的字符串 eg: const fruits &#x3D; [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&qu...","link":"","photos":[],"count_time":{"symbolsCount":"24k","symbolsTime":"22 mins."},"categories":[],"tags":[{"name":"Javascript","slug":"Javascript","count":1,"path":"api/tags/Javascript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">数组方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">字符串转换</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">删除数组元素</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B7%BB%E5%8A%A0%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">添加数组元素</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BF%AE%E6%94%B9%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">修改数组元素</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E6%8B%BC%E6%8E%A5\"><span class=\"toc-text\">数组拼接</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%89%AA%E5%88%87%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">剪切数组</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">数组排序</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E6%89%BE%E6%9C%80%E9%AB%98%EF%BC%88%E6%88%96%E6%9C%80%E4%BD%8E%EF%BC%89%E7%9A%84%E6%95%B0%E7%BB%84%E5%80%BC\"><span class=\"toc-text\">查找最高（或最低）的数组值</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E8%BF%AD%E4%BB%A3\"><span class=\"toc-text\">数组迭代</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#JavaScript%E6%97%A5%E6%9C%9F\"><span class=\"toc-text\">JavaScript日期</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%97%A5%E6%9C%9F%E8%BE%93%E5%85%A5%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">日期输入格式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%97%A5%E6%9C%9F%E8%8E%B7%E5%8F%96%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">日期获取方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%9B%91%E8%A7%86%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">数据监视原理总结</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A1%A8%E5%8D%95%E6%95%B0%E6%8D%AE%E6%94%B6%E9%9B%86\"><span class=\"toc-text\">表单数据收集</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%87%E6%BB%A4%E5%99%A8\"><span class=\"toc-text\">过滤器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%86%85%E7%BD%AE%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">内置指令</span></a></li></ol>","author":{"name":"Luo","slug":"blog-author","avatar":"https://w.wallhaven.cc/full/vq/wallhaven-vqdpzm.jpg","link":"/","description":"一名00后码农 <br /> @ <b>公众号：四夕白水</b>","socials":{"github":"https://github.com/TriDiamond","twitter":"","stackoverflow":"https://stackoverflow.org.cn/","wechat":"","qq":"","weibo":"https://weibo.com/","zhihu":"https://www.zhihu.com/","csdn":"","juejin":"https://juejin.cn/user/settings/profile","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/1541391754?spm_id_from=333.788.0.0"},"baidu":{"icon":"iconfont icon-baidu","link":"https://space.bilibili.com/1541391754?spm_id_from=333.788.0.0"},"book":{"icon":"far fa-address-book","link":"https://space.bilibili.com/1541391754?spm_id_from=333.788.0.0"}}}},"mapped":true,"prev_post":{"title":"谢谢你这么可爱来看我","uid":"8f98f95190bf6f9aef227316ecc3abb6","slug":"hello-world","date":"2023-08-15T02:02:21.339Z","updated":"2023-08-15T07:07:46.264Z","comments":true,"path":"api/articles/hello-world.json","keywords":null,"cover":"/medias/w.jpg","text":"欢迎大家来看我的个人博客❥(^_-) 该博客是基于 Hexo! +GitHub.搭建的。晴天 花海 稻香 一路向北 半岛铁盒 枫 兰亭集序 反方向的钟 叶惠美 最伟大的作品 范特西 不能说的秘密 ","link":"","photos":[],"count_time":{"symbolsCount":110,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Luo","slug":"blog-author","avatar":"https://w.wallhaven.cc/full/vq/wallhaven-vqdpzm.jpg","link":"/","description":"一名00后码农 <br /> @ <b>公众号：四夕白水</b>","socials":{"github":"https://github.com/TriDiamond","twitter":"","stackoverflow":"https://stackoverflow.org.cn/","wechat":"","qq":"","weibo":"https://weibo.com/","zhihu":"https://www.zhihu.com/","csdn":"","juejin":"https://juejin.cn/user/settings/profile","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/1541391754?spm_id_from=333.788.0.0"},"baidu":{"icon":"iconfont icon-baidu","link":"https://space.bilibili.com/1541391754?spm_id_from=333.788.0.0"},"book":{"icon":"far fa-address-book","link":"https://space.bilibili.com/1541391754?spm_id_from=333.788.0.0"}}}},"feature":true},"next_post":{"title":"git命令","uid":"e5c9682f958fbae18070afcafeff3ba8","slug":"git-1/git-1","date":"2020-09-15T10:49:36.000Z","updated":"2023-08-10T02:56:17.343Z","comments":true,"path":"api/articles/git-1/git-1.json","keywords":null,"cover":"/medias/g.jpg","text":"git 命令 第一次使用git 必须设置用户信息 git config --global user.name luohaozhe 设置用户邮箱 —设置成功后可以在本机找到用户目录下的.git开头文件查看 git config --global user.email luohaoz...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"git","slug":"git","count":1,"path":"api/tags/git.json"}],"author":{"name":"Luo","slug":"blog-author","avatar":"https://w.wallhaven.cc/full/vq/wallhaven-vqdpzm.jpg","link":"/","description":"一名00后码农 <br /> @ <b>公众号：四夕白水</b>","socials":{"github":"https://github.com/TriDiamond","twitter":"","stackoverflow":"https://stackoverflow.org.cn/","wechat":"","qq":"","weibo":"https://weibo.com/","zhihu":"https://www.zhihu.com/","csdn":"","juejin":"https://juejin.cn/user/settings/profile","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/1541391754?spm_id_from=333.788.0.0"},"baidu":{"icon":"iconfont icon-baidu","link":"https://space.bilibili.com/1541391754?spm_id_from=333.788.0.0"},"book":{"icon":"far fa-address-book","link":"https://space.bilibili.com/1541391754?spm_id_from=333.788.0.0"}}}},"feature":true}}