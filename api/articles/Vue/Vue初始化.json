{"title":"Vue","uid":"5f258f833478a2a0e21ce42d19305683","slug":"Vue/Vue初始化","date":"2023-08-09T08:19:45.000Z","updated":"2023-08-10T05:25:55.669Z","comments":true,"path":"api/articles/Vue/Vue初始化.json","keywords":null,"cover":"/medias/1.jpg","content":"<h1 id=\"学习Vue之前要掌握的JavaScript-基础知识？\"><a href=\"#学习Vue之前要掌握的JavaScript-基础知识？\" class=\"headerlink\" title=\"学习Vue之前要掌握的JavaScript:基础知识？\"></a>学习Vue之前要掌握的JavaScript:基础知识？</h1><h2 id=\"ES6语法规范-x2F-ES6模块化\"><a href=\"#ES6语法规范-x2F-ES6模块化\" class=\"headerlink\" title=\"ES6语法规范&#x2F;ES6模块化\"></a>ES6语法规范&#x2F;ES6模块化</h2><pre class=\"line-numbers language-bush\" data-language=\"bush\"><code class=\"language-bush\">\n1.默认导入与默认导出（一个文件只能使用一次默认导出）\nexport default\nimport 别名(随意符合规范) from &#39;文件地址&#39;\n2.按需导入和按需导出（一个文件可以使用多次按需导出）\nexport let a &#x3D; &#39;aaa&#39;\nexport function say() &#123;\nconsole.log(&#39;2222&#39;)\n&#125;\nimport &#123;a, say&#125; from &#39;文件地址&#39;\n3.直接导入并执行模块代码\nimport &#39;文件地址&#39;</code></pre>\n\n<h2 id=\"包管理器webpack\"><a href=\"#包管理器webpack\" class=\"headerlink\" title=\"包管理器webpack\"></a>包管理器webpack</h2><pre class=\"line-numbers language-bush\" data-language=\"bush\"><code class=\"language-bush\">\n1.在webpack的配置文件中，初始化如下基本配置：\nmodule.exports &#x3D;\nmode:&#39;development&#39;&#x2F;&#x2F;mode用来指定构建模式&#39;development开发模式编译速度快\nproduction 为生产模式压缩体积小\n\n\n2.在package,json\n配香文件中的scripts节点下，新增dev脚本如下：\n&quot;scripts&quot;:\n&quot;dev”6”webpack&quot;&#x2F;∥script节点下的脚本，可以通过npm run执行\n\n在终端中运行npm run dev命令，启动webpack进行项目打包。\n\n3.配置打包的入口与出口文件\nconst path&#x3D;require(&#39;path&#39;)&#x2F;&#x2F;导入node.js中专门操作路径的模块\nmodule.exports &#x3D;\nentry:path.join(dirname,&#39;.&#x2F;src&#x2F;index.js&#39;),&#x2F;&#x2F;打包入口文件的路径\noutput:\npath:path.join(dirname,·.&#x2F;dist&#39;),&#x2F;&#x2F;输出文件的存放路径\nfilename:&#39;bundle.js&#39;&#x2F;&#x2F;输出文件的名称</code></pre>\n\n<h2 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h2><pre class=\"line-numbers language-bush\" data-language=\"bush\"><code class=\"language-bush\">\n原型、原型链\n数组常用方法\naxios\npromise</code></pre>\n\n<h2 id=\"数据绑定-el和data的两种写法\"><a href=\"#数据绑定-el和data的两种写法\" class=\"headerlink\" title=\"数据绑定 el和data的两种写法\"></a>数据绑定 el和data的两种写法</h2><pre class=\"line-numbers language-bush\" data-language=\"bush\"><code class=\"language-bush\">&lt;!-- v-bind：可简写为 :\n    单向数据绑定：开发者工具数据改变页面数据变化、页面数据变化控开发者工具数据不变。 --&gt;\n   \n    &lt;!-- v-model:  v-model:value 可简写为    v-model:\n    双向数据绑定  开发者工具数据改变 页面数据也变化  页面数据变化开发者工具也变化\n    只能应用于表单类元素上（输入类元素 input 单选多选框 select框 多行输入  有 value值）其他元素类型无法使用 \n    \n--&gt;\n\n\n&lt;!-- el 和 data的两种写法\n\n\n--&gt;\n    &lt;!-- 定义容器 --&gt;\n     &lt;div id&#x3D;&quot;root&quot;&gt;\n         &lt;h1&gt;你好, &#123;&#123; name &#125;&#125;&lt;&#x2F;h1&gt;\n     &lt;&#x2F;div&gt;\n \n     &lt;script&gt;\n   Vue.config.productionTip &#x3D; false &#x2F;&#x2F;关闭生产提示\n   \n&#x2F;&#x2F;    el 第二种写法 利用$mount 属性\n&#x2F;&#x2F;    data的第二种写法\n   \n   const v &#x3D;  new Vue(&#123;\n            &#x2F;&#x2F; el:&#39;#root&#39;, &#x2F;&#x2F;el第一种写法\n            &#x2F;&#x2F; data:&#123;      &#x2F;&#x2F;data第一种写法对象式\n            &#x2F;&#x2F;  name:&#39;罗浩哲&#39;\n            &#x2F;&#x2F; &#125;\n            &#x2F;&#x2F; data第二种写法 函数式  组件必须使用\n            data() &#123;\n                console.log(&#39;@@@&#39;,this) &#x2F;&#x2F;普通函数此处的this指向Vue实例对象\n                &#x2F;&#x2F; console.log(&#39;@@@&#39;,this) &#x2F;&#x2F;不能写成箭头函数此处的this指向window全局实例对象\n\n               \n                return&#123;\n                    name: &#39;罗浩哲&#39;\n                &#125;\n            &#125;\n         &#125;);\n\n      &#x2F;&#x2F;挂载\n      v.$mount(&#39;#root&#39;)   &#x2F;&#x2F;第二种写法\n\n        &#x2F;&#x2F;  console.log(v);\n     &lt;&#x2F;script&gt;</code></pre>\n\n<h2 id=\"MVVM模型\"><a href=\"#MVVM模型\" class=\"headerlink\" title=\"MVVM模型\"></a>MVVM模型</h2><p><img src=\"/../../images/931a48ad1c9c57b1821270923d31e19d.png\" alt=\"截图\"></p>\n<pre class=\"line-numbers language-bush\" data-language=\"bush\"><code class=\"language-bush\">data中的所有属性最后都出现在vm身上\nVue身上的所有属性及Vue原型上的所有属性在Vue模板上都可以直接使用</code></pre>\n\n<h2 id=\"Object-defineProperty-回顾\"><a href=\"#Object-defineProperty-回顾\" class=\"headerlink\" title=\"Object.defineProperty 回顾\"></a>Object.defineProperty 回顾</h2><pre class=\"line-numbers language-bush\" data-language=\"bush\"><code class=\"language-bush\"> &#x2F;&#x2F;  案列age的值由number决定且当number发生改变时自动更新\n    let number &#x3D; 18\n\n    &#x2F;&#x2F;   定义对象\n    let Person &#x3D; &#123;\n        name: &#39;luo&#39;,\n        sex: &#39;男&#39;,\n    &#125;\n    &#x2F;&#x2F; 传入四个配置项 对象默认属性修改\n    &#x2F;&#x2F; Object.defineProperty(对象名, 要添加的属性名， &#123;配置对象&#125;)\n    Object.defineProperty(Person, &#39;age&#39;, &#123;\n    &#x2F;&#x2F;    value: 18,  &#x2F;&#x2F;属性值\n    &#x2F;&#x2F;    enumerable:true, &#x2F;&#x2F;控制值是否可以枚举遍历 默认值为false\n    &#x2F;&#x2F;    writable: true, &#x2F;&#x2F;控制值是否可以被修改 默认值为false\n    &#x2F;&#x2F;    configurable:true, &#x2F;&#x2F;控制值是否可以被删除 默认值为false\n\n    &#x2F;&#x2F;   当有人读取Person age 属性时 get就会被调用 且返回值就是age的值\n    get() &#123;\n        console.log(&#39;age属性被读取了&#39;);\n        return  number;\n    &#125;,\n\n    &#x2F;&#x2F;当有人修改age的属性时 set就会被调用 且会收到修改具体的值\n    set() &#123;\n        console.log(&#39;age属性被修改了 且值是&#39;, value);\n        number &#x3D; value\n    &#125;\n    \n    &#125;)\n&#x2F;&#x2F;  for(let v in Person)&#123;\n&#x2F;&#x2F;     console.log(v);\n&#x2F;&#x2F;  &#125;\n  \n&#x2F;&#x2F; console.log(Person);\n</code></pre>\n\n<h2 id=\"数据代理\"><a href=\"#数据代理\" class=\"headerlink\" title=\"数据代理\"></a>数据代理</h2><pre class=\"line-numbers language-bush\" data-language=\"bush\"><code class=\"language-bush\">&lt;!-- 数据代理 通过一个对象代理对另一个对象中属性的操作（读&#x2F;写） --&gt;\n       \n      &lt;script&gt;\n        let Obj &#x3D; &#123;x:100&#125;\n        let Obj1 &#x3D; &#123;y:200&#125;\n        &#x2F;&#x2F; Obj1通过添加Obj中的x可以读写Obj中的值x\n       Object.defineProperty(Obj1, &#39;x&#39;, &#123;\n        get() &#123;\n            return Obj.x\n        &#125;,\n        set(value) &#123;\n            Obj.x &#x3D;  value\n        &#125;\n       &#125;)\n\n      &lt;&#x2F;script&gt;</code></pre>\n\n<pre class=\"line-numbers language-bush\" data-language=\"bush\"><code class=\"language-bush\">1.Vue中的数据代理\n   通过vm对象来代理data中对象中属性的操作（都getter、写、setter）\n2.Vue代理的好处\n    更加方便的操作data中的数据\n3.基本原理 ：\n    通过Object.defineProperty()把data对象中的所有属性\n    添加vm身上，为每一个添加的data中的属性都指定getter\n    和setter\n    在getter 和 setter 内部去操作（读&#x2F;写属性）data中对应的属性\n    </code></pre>\n\n<p><img src=\"/../../images/ec83efcce71f017fcfe3f3326fb667a6.png\" alt=\"截图\"></p>\n<h2 id=\"事件的基本使用\"><a href=\"#事件的基本使用\" class=\"headerlink\" title=\"事件的基本使用\"></a>事件的基本使用</h2><pre class=\"line-numbers language-bush\" data-language=\"bush\"><code class=\"language-bush\">1.v-on:click  简写形式  @click \n2.事件的回调要写在methods中最终会出现在vm中\n3.methods中配置的函数不要用箭头函数  this\n4.methods中配置的函数 this指向vm\n5.@click&#x3D;&quot;demo&quot; 和@click&#x3D;&quot;demo($event, 要传递的参数)&quot;\n\n&lt;!-- 定义容器 --&gt;\n    &lt;div id&#x3D;&quot;root&quot;&gt;\n       &lt;h1&gt;单击事件绑定&lt;&#x2F;h1&gt;\n       &lt;!-- &lt;button v-on:click&#x3D;&quot;showInfo&quot;&gt;&#123;&#123;name&#125;&#125;&lt;&#x2F;button&gt; --&gt;\n       &lt;!-- v-on:click  简写形式  @click  传递参数  函数名后面跟)() --&gt;\n       &lt;button @click&#x3D;&quot;showInfo(99,$event)&quot;&gt;&#123;&#123;name&#125;&#125;&lt;&#x2F;button&gt;\n    &lt;&#x2F;div&gt;\n    &lt;script&gt;\n       Vue.config.productionTip &#x3D; false;&#x2F;&#x2F;关闭生产提示\n       const vm &#x3D; new Vue(&#123;\n           data() &#123;\n               return&#123;\n                   name: &#39;luohaozhe&#39;,\n                   id: &#39;99&#39;\n               &#125;\n           &#125;,\n           methods: &#123;\n              showInfo(number,event)&#123;\n               &#x2F;&#x2F; 输出按钮中的文本\n               console.log(event.target.innerText);\n               &#x2F;&#x2F;   alert(&#39;你好吗？&#39;)\n               &#x2F;&#x2F; console.log(this);&#x2F;&#x2F;此处的this是vm\n               console.log(number);\n              &#125;\n           &#125;,\n       &#125;);\n       vm.$mount(&#39;#root&#39;);\n    &lt;&#x2F;script&gt;</code></pre>\n\n<h2 id=\"事件修饰符\"><a href=\"#事件修饰符\" class=\"headerlink\" title=\"事件修饰符\"></a>事件修饰符</h2><pre class=\"line-numbers language-bush\" data-language=\"bush\"><code class=\"language-bush\">&lt;h2&gt;事件修饰符&lt;&#x2F;h2&gt;\n         &lt;!-- vue中的事件修饰符\n         1.prevent: 阻止默认事件（常用）\n         2.stop: 阻止事件冒泡  (常用)\n         3.once 事件只触发一次（常用）\n         4.capture 使用事件的捕获模式\n         5.self 只有event.target是当前操作的元素时才出发事件\n         6.passive 事件的默认行为立即执行，无需等待事件回调执行完毕\n         \n         \n         7.修饰符可以连续写\n        \n          --&gt;\n\n         &lt;!--prevent事件修饰符 阻止a标签默认跳转 --&gt;\n         &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;www.baidu.com&quot; @click.prevent&#x3D;&quot;showInfo&quot;&gt;点我提示信息&lt;&#x2F;a&gt;\n   \n         &lt;!-- 2.stop: 阻止事件冒泡  (常用) --&gt;\n         &lt;div id&#x3D;&quot;demo1&quot; @click&#x3D;&quot;showInfo&quot;&gt;\n            &lt;button @click.stop&#x3D;&quot;showInfo&quot;&gt;点我提示信息&lt;&#x2F;button&gt;\n         &lt;&#x2F;div&gt;\n   \n         &lt;!-- 3.once 事件只触发一次（常用） --&gt;\n         &lt;button @click.once&#x3D;&quot;showInfo&quot;&gt;点我提示内容&lt;&#x2F;button&gt;\n        &lt;&#x2F;div&gt;\n    &lt;script&gt;\n        Vue.config.productionTip &#x3D; false;\n       const vm &#x3D; new Vue(&#123;\n        data() &#123;\n            return &#123;\n                \n            &#125;\n        &#125;,\n        methods: &#123;\n            showInfo(e) &#123;\n                &#x2F;&#x2F;方法一 e.preventDefault() 阻止默认行为\n                &#x2F;&#x2F; e.preventDefault()\n                &#x2F;&#x2F;阻止事件冒泡\n                &#x2F;&#x2F; e.stopPropagation();\n                \n                alert(&#39;早上好呀&#39;)\n            &#125;\n        &#125;,\n       &#125;)\n       vm.$mount(&#39;#root&#39;)\n    &lt;&#x2F;script&gt;</code></pre>\n\n<h2 id=\"键盘事件\"><a href=\"#键盘事件\" class=\"headerlink\" title=\"键盘事件\"></a>键盘事件</h2><pre class=\"line-numbers language-bush\" data-language=\"bush\"><code class=\"language-bush\"> &lt;!-- vue常用按键别名\n    1.回车  &#x3D;&#x3D; enter\n    2.删除  &#x3D;&#x3D; delete （捕获删除和退格键）\n    3.退出  &#x3D;&#x3D; esc \n    4.空格  &#x3D;&#x3D; space\n    5.换行  &#x3D;&#x3D; tab    (特殊 必须配合keydown使用)\n    上      &#x3D;&#x3D; up\n    下      &#x3D;&#x3D; down\n    左      &#x3D;&#x3D; left\n    右      &#x3D;&#x3D; right\n\n    2.Vue未提供的别名可通过  按键原始Key值去绑定 但注意要转为kebab-case（短横线命名）\n\n    3.系统修饰符（用法特殊）ctrl alt shift mate\n    （1）配合keyup使用  按下修饰键的同事，再按下其他键 随后释放其他键 事件才被触发\n      小技巧： 要指定只用按下 ctrl + y才执行    @keyup.ctrl.y\n     (2)配合keydown使用 正常触发事件\n\n     4.也可以使用keyCode去指定具体的按键（不推荐）\n    \n     5.Vue.config.KeyCodes自定义键名 &#x3D; 键码 可以订制按键别名\n\n    --&gt;\n         &lt;h2&gt;&#123;&#123;name&#125;&#125;事件&lt;&#x2F;h2&gt;\n        \n &lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;按下回车提示输入&quot; @keyup.enter&#x3D;&quot;showInfo&quot;&gt;\n&lt;&#x2F;div&gt;\n    &lt;script&gt;\n    Vue.config.productionTip &#x3D; false;\n       const vm &#x3D; new Vue(&#123;\n        data() &#123;\n            return &#123;\n              name: &#39;键盘&#39;  \n            &#125;\n        &#125;,\n        methods: &#123;\n            showInfo(e) &#123;\n                &#x2F;&#x2F; 按下回车时停止\n                &#x2F;&#x2F; if(e.Keycode !&#x3D;&#x3D; 13) return\n                &#x2F;&#x2F; 输出input中输入的键盘名 和键盘编码 回车为13\n                &#x2F;&#x2F; console.log( e.Key e.Keycode);\n                &#x2F;&#x2F; 输出在input中输入的值\n               console.log(e.target.value);\n            &#125;\n        &#125;,\n       &#125;)\n       vm.$mount(&#39;#root&#39;)\n    &lt;&#x2F;script&gt;</code></pre>\n\n<h2 id=\"计算属性\"><a href=\"#计算属性\" class=\"headerlink\" title=\"计算属性\"></a>计算属性</h2><pre class=\"line-numbers language-bush\" data-language=\"bush\"><code class=\"language-bush\">&lt;!-- 计算属性 computed \n     1.定义: 要用的属性不存在通过已有的属性计算出来\n     2.原理: 底层借助Object.defineproperty方法提供的getter 和setter\n        3.get函数什么时候执行\n          1.函数初次调用会执行一次\n          2.当依赖的属性发生改变时会再次被调用测试方便\n      5.备注：\n      1.计算属性最终会出现在vm上，直接读取即可\n      2.如果计算属性要被修改那必须写set函数去响应修改\n      且set中要引起计算时依赖的数据发生变化 --&gt;\n\n\n    &lt;div id&#x3D;&quot;root&quot;&gt;\n        姓: &lt;input type&#x3D;&quot;text&quot;  v-model&#x3D;&quot;surname&quot;&gt;&lt;br&gt;&lt;br&gt;\n        名:&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;name&quot;&gt;&lt;br&gt;&lt;br&gt;\n        &lt;!-- 插值语法实现 --&gt;\n        &lt;!-- &lt;h3&gt;全名: &#123;&#123;surname.slice(0,2)&#125;&#125;-&#123;&#123;name&#125;&#125;&lt;&#x2F;h3&gt; --&gt;\n        &lt;!-- methods实现 --&gt;\n        &lt;!-- &lt;h3&gt;全名: &#123;&#123;fullName()&#125;&#125;&lt;&#x2F;h3&gt; --&gt;\n        &lt;!-- 计算属性实现 --&gt;\n        &lt;h3&gt;全名: &#123;&#123;fullName&#125;&#125;&lt;&#x2F;h3&gt;\n       &lt;&#x2F;div&gt;\n\n   &lt;script&gt;\n   const vm  &#x3D; new Vue(&#123;\n       data() &#123;\n           return &#123;\n               surname: &#39;罗&#39;,\n               name: &#39;皓哲&#39;,\n           &#125;\n      \n       &#125;,\n       methods: &#123;\n       &#x2F;&#x2F;    fullName() &#123;\n       &#x2F;&#x2F;        return this.surname + &#39;-&#39; + this.name\n       &#x2F;&#x2F;    &#125;\n           &#125;,\n       computed:&#123;\n         &#x2F;&#x2F; 简写形式 ---只读取不修改才可以使用简写形式\n          fullName() &#123;\n               return this.surname + this.name\n          &#125; \n       \n       &#x2F;&#x2F;完整形式\n           fullName:&#123;\n               get() &#123;\n                &#x2F;&#x2F;get 有什么作用  当有人读取fullName()时get就会被调用\n                &#x2F;&#x2F;get 什么时候被调用  \n               &#x2F;&#x2F;   1.初次读取fullName时\n               &#x2F;&#x2F;   2.所依赖的数发生变化时\n               console.log(&#39;get被调用了&#39;);\n               &#x2F;&#x2F;this 指向 vm\n                 return this.surname + &#39;-&#39; + this.name\n               &#125;,\n               &#x2F;&#x2F;set 什么时候被调用 当fullName被修改时调用\n               set(value) &#123;\n                    console.log(&#39;set&#39;, value);\n                    &#x2F;&#x2F;按照指定字符将将数据拆分成一个数组\n                    const arr &#x3D; value.split(&#39;-&#39;)\n                    this.surname &#x3D; arr[0]\n                    this.name &#x3D; arr[1]\n               &#125;\n           &#125;\n       &#125;\n   &#125;);\n   vm.$mount(&#39;#root&#39;)\n   &lt;&#x2F;script&gt;</code></pre>\n\n<h2 id=\"监视属性\"><a href=\"#监视属性\" class=\"headerlink\" title=\"监视属性\"></a>监视属性</h2><pre class=\"line-numbers language-bush\" data-language=\"bush\"><code class=\"language-bush\">&lt;!-- 监视属性watch\n     1.当被监视的属性发生变化时，回调函数自动调用 进行相关操作\n     2.监视的属性必须存在 才能进行监视！！！\n     3.监视的两种写法\n        (1)通过 new Vue 传入 watch:&#123;handler(NewValue,oldValue)&#123;&#125;&#125;\n        (2)通过vm.$watch(&#39;要监视的属性&#39;,&#123;配置&#125;) --&gt;\n\n\n\n    &lt;div id&#x3D;&quot;root&quot;&gt;\n        &lt;h1&gt;今天天气很&#123;&#123;info&#125;&#125;&lt;&#x2F;h1&gt;\n     &lt;!-- &lt;button @click&#x3D;&quot;Switch&quot;&gt;切换天气&lt;&#x2F;button&gt; --&gt;\n     &lt;!-- 小技巧 语句简单可直接写到click后面--&gt;\n     &lt;button @click&#x3D;&quot;isHot &#x3D; !isHot&quot;&gt;切换天气&lt;&#x2F;button&gt;\n\n    &lt;&#x2F;div&gt;\n    \n     &lt;script&gt;\n        const vm &#x3D; new Vue(&#123;\n            data() &#123;\n                return &#123;\n                   isHot: true \n                &#125;\n            &#125;,\n            computed:&#123;\n                info() &#123;\n                    return this.isHot ? &#39;炎热&#39; : &#39;凉爽&#39;\n                &#125;\n            &#125;,\n            methods: &#123;\n                Switch() &#123;\n                   this.isHot &#x3D; !this.isHot\n                &#125;\n            &#125;,\n            watch:&#123;\n                isHot:&#123;\n\n                    immediate:true,&#x2F;&#x2F;初始化时让handler调用一下 默认为false\n                    &#x2F;&#x2F;handler 什么时候调用,当isHot被修改了\n                    handler(newValue, oldValue)&#123;\n                         console.log(&#39;isHot被修改了&#39;,newValue,oldValue);\n                    &#125;\n                &#125;,\n                &#x2F;&#x2F; info:&#123;\n                &#x2F;&#x2F;     immediate:true,&#x2F;&#x2F;初始化时让handler调用一下 默认为false\n                &#x2F;&#x2F;     &#x2F;&#x2F;handler 什么时候调用,当isHot被修改了\n                &#x2F;&#x2F;     handler(newValue, oldValue)&#123;\n                &#x2F;&#x2F;          console.log(&#39;info被修改了&#39;,newValue,oldValue);\n                &#x2F;&#x2F;     &#125;\n                &#x2F;&#x2F; &#125;\n            &#125;\n        &#125;)\n        vm.$mount(&#39;#root&#39;)\n        &#x2F;&#x2F; 监听的第二种写法\n        &#x2F;&#x2F; vm.$watch(&#39;isHot&#39;, &#123;\n        &#x2F;&#x2F;     immediate:true,&#x2F;&#x2F;初始化时让handler调用一下 默认为false\n        &#x2F;&#x2F;             &#x2F;&#x2F;handler 什么时候调用,当isHot被修改了\n        &#x2F;&#x2F;             handler(newValue, oldValue)&#123;\n        &#x2F;&#x2F;                  console.log(&#39;isHot被修改了&#39;,newValue,oldValue);\n        &#x2F;&#x2F;             &#125;\n        &#x2F;&#x2F; &#125;)\n     &lt;&#x2F;script&gt;</code></pre>\n\n<h2 id=\"深度监视\"><a href=\"#深度监视\" class=\"headerlink\" title=\"深度监视\"></a>深度监视</h2><pre class=\"line-numbers language-bush\" data-language=\"bush\"><code class=\"language-bush\">  &lt;!-- 深度监视：\n    1.Vue的watch默认不监测对象内部值的改变\n    2.配置deep: true 可以监测对象内部值的改变\n    备注：\n    1.Vue自身可以监测对象内部值的改变，但Vue提供的watch默认不可以\n    2。使用watch时根据数据内部的具体结构，决定是否采用深度监视 --&gt;\n\n\n    &lt;div id&#x3D;&quot;root&quot;&gt;\n        &lt;h1&gt;今天天气很&#123;&#123;info&#125;&#125;&lt;&#x2F;h1&gt;\n     &lt;!-- &lt;button @click&#x3D;&quot;Switch&quot;&gt;切换天气&lt;&#x2F;button&gt; --&gt;\n     &lt;!-- 小技巧 语句简单可直接写到click后面--&gt;\n     &lt;button @click&#x3D;&quot;isHot &#x3D; !isHot&quot;&gt;切换天气&lt;&#x2F;button&gt;\n     &lt;hr&gt;\n\n     &lt;h3&gt;a的值是: &#123;&#123;numbers.a&#125;&#125;&lt;&#x2F;h3&gt;\n     &lt;button @click&#x3D;&quot;numbers.a++&quot;&gt; 点我让a+1&lt;&#x2F;button&gt;\n&lt;hr&gt;\n&lt;h3&gt;b的值是: &#123;&#123;numbers.b&#125;&#125;&lt;&#x2F;h3&gt;\n     &lt;button @click&#x3D;&quot;numbers.b++&quot;&gt; 点我让b+1&lt;&#x2F;button&gt;\n    &lt;&#x2F;div&gt;\n    \n     &lt;script&gt;\n        const vm &#x3D; new Vue(&#123;\n            data() &#123;\n                return &#123;\n                   isHot: true,\n                   numbers:&#123;\n                     a: 1,\n                     b: 1\n                   &#125;\n                &#125;\n            &#125;,\n            computed:&#123;\n                info() &#123;\n                    return this.isHot ? &#39;炎热&#39; : &#39;凉爽&#39;\n                &#125;\n            &#125;,\n            methods: &#123;\n                Switch() &#123;\n                   this.isHot &#x3D; !this.isHot\n                &#125;\n            &#125;,\n            watch:&#123;\n                isHot:&#123;\n\n                    &#x2F;&#x2F; immediate:true,&#x2F;&#x2F;初始化时让handler调用一下 默认为false\n                    &#x2F;&#x2F;handler 什么时候调用,当isHot被修改了\n                    handler(newValue, oldValue)&#123;\n                         console.log(&#39;isHot被修改了&#39;,newValue,oldValue);\n                    &#125;\n                &#125;,\n                &#x2F;&#x2F;监视多级结构中某个属性值的变化\n                &#x2F;&#x2F; &#39;numbers.a&#39;:&#123;\n                &#x2F;&#x2F;     handler()&#123;\n                &#x2F;&#x2F;         console.log(&#39;a被改变了&#39;);\n                &#x2F;&#x2F;     &#125;\n                &#x2F;&#x2F; &#125;,\n                &#x2F;&#x2F;深度监视监视多级结构所有属性的变化 deep 默认为false\n\n                numbers:&#123;\n                      deep: true,\n                      handler() &#123;\n                        console.log(&#39;numbers被改变了&#39;);\n                      &#125;\n                &#125;\n            &#125;\n        &#125;)\n        vm.$mount(&#39;#root&#39;)</code></pre>\n\n<h2 id=\"数据监视简写\"><a href=\"#数据监视简写\" class=\"headerlink\" title=\"数据监视简写\"></a>数据监视简写</h2><pre class=\"line-numbers language-bush\" data-language=\"bush\"><code class=\"language-bush\">&#x2F;&#x2F; 简写 只有handler时\n                 isHot(newValue, oldValue) &#123;\n                    console.log(&#39;isHot被修改了&#39;, newValue, oldValue);\n                 &#125;,\n</code></pre>\n\n<h2 id=\"computed-和-watch-的对比\"><a href=\"#computed-和-watch-的对比\" class=\"headerlink\" title=\"computed 和 watch 的对比\"></a>computed 和 watch 的对比</h2><pre class=\"line-numbers language-bush\" data-language=\"bush\"><code class=\"language-bush\">&lt;!-- computed 和 watch 的区别\n      1.computed能完成的,watch都可以完成\n      2.watch能完成的，computed不一定能完成 例如异步操作\n      两个重要的小原则\n      1.被vue所管理的函数最好写成普通函数  这样this指向 vm\n      2.所有不被Vue所管理的函数（定时器函数, ajax回调函数 Promise的回调函数）\n      最好写成箭头函数  这样this才会指向 vm 或组件实例对象\n       --&gt;\n\n\n\n     &lt;div id&#x3D;&quot;root&quot;&gt;\n         姓: &lt;input type&#x3D;&quot;text&quot;  v-model&#x3D;&quot;surname&quot;&gt;&lt;br&gt;&lt;br&gt;\n         名:&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;name&quot;&gt;&lt;br&gt;&lt;br&gt;\n         &lt;h3&gt;全名: &#123;&#123;fullName&#125;&#125;&lt;&#x2F;h3&gt;\n        &lt;&#x2F;div&gt;\n\n    &lt;script&gt;\n    const vm  &#x3D; new Vue(&#123;\n        data() &#123;\n            return &#123;\n               surname: &#39;罗&#39;,\n               name: &#39;浩哲&#39;,\n               fullName: &#39;罗浩哲&#39;\n            &#125;\n       \n        &#125;,\n        watch:&#123;\n            surname(val)&#123;\n                setTimeout(() &#x3D;&gt; &#123;\n                    return this.fullName &#x3D; val + &#39; &#39; + this.name;\n                &#125;, 1000);\n            &#125;,\n            name(val)&#123;\n                setTimeout(() &#x3D;&gt; &#123;\n                    return this.fullName &#x3D; this.surname + &#39; &#39; +val;\n                &#125;, 1000);\n            &#125;\n\n        &#125;\n      \n    &#125;);\n    vm.$mount(&#39;#root&#39;)</code></pre>\n\n<h2 id=\"class样式绑定-style样式绑定\"><a href=\"#class样式绑定-style样式绑定\" class=\"headerlink\" title=\"class样式绑定 style样式绑定\"></a>class样式绑定 style样式绑定</h2><pre class=\"line-numbers language-bush\" data-language=\"bush\"><code class=\"language-bush\"> &lt;!-- 1.class样式绑定\n    写法： :class&#x3D;&quot;xxx&quot; xxx 可以是字符串 数组 对象\n    2.style样式绑定\n    :style&#x3D;&quot;&#123;fontSize: xxx&#125;&quot; 对象写法  其中xxx是动态值\n    :style&#x3D;&quot;[a,b]&quot; 数组形式  其中 a，b 是样式对象 --&gt;\n\n&lt;div id&#x3D;&quot;root&quot;&gt;\n    &lt;!-- 绑定class 样式----字符串写法 适用于样式类名不确定 需要动态指定 --&gt;\n     &lt;div class&#x3D;&quot;basic&quot; :class&#x3D;&quot;mood&quot; @click&#x3D;&quot;changeMood&quot;&gt;&#123;&#123;name&#125;&#125;&lt;&#x2F;div&gt;\n     &lt;hr&gt;\n     &lt;!-- 绑定class 样式----数组写法 适用于要绑定的样式个数不确定，名字也不确定 需要动态指定 --&gt;\n     &lt;div class&#x3D;&quot;basic&quot; :class&#x3D;&quot;arr&quot;&gt;&#123;&#123;name&#125;&#125;&lt;&#x2F;div&gt;\n     &lt;hr&gt;\n     &lt;!-- 绑定class 样式----对象写法 适用于要绑定的样式个数确定，名字也确定 需要动态决定用不用 --&gt; \n     &lt;div class&#x3D;&quot;basic&quot; :class&#x3D;&quot;obj&quot;&gt;&#123;&#123;name&#125;&#125;&lt;&#x2F;div&gt;\n     &lt;hr&gt;\n     \n     &lt;!-- 绑定style样式 --&gt;\n     &lt;div class&#x3D;&quot;basic&quot; :style&#x3D;&quot;styObj&quot;&gt;&#123;&#123;name&#125;&#125;&lt;&#x2F;div&gt;\n    &lt;&#x2F;div&gt;\n    &lt;script&gt;\n        const vm &#x3D; new Vue(&#123;\n            data() &#123;\n                return &#123;\n                    name: &#39;孙润美&#39;,\n                    mood: &#39;&#39;,\n                    arr: [&quot;l1&quot;,&quot;l2&quot;,&quot;l3&quot;],\n                    obj:&#123;\n                        l1: false,\n                        l2: false,\n                    &#125;,\n                    styObj:&#123;\n                        fontSize: &#39;20px&#39;,\n                        color: &#39;blue&#39;,\n                        backgroundColor: &#39;pink&#39;\n\n                    &#125;\n                &#125;\n            &#125;,\n            methods: &#123;\n                changeMood() &#123;\n                &#x2F;&#x2F; 创建数据将样式类名存入\n                 const arr &#x3D; [&#39;happy&#39;,&#39;sad&#39;,&#39;nomal&#39;];\n                &#x2F;&#x2F;  随机生成012三个数\n                const index &#x3D;   Math.floor(Math.random()*3)\n                &#x2F;&#x2F;点击随机更改颜色\n                this.mood &#x3D; arr[index]\n\n                &#125;\n            &#125;,\n        &#125;)\n        vm.$mount(&#39;#root&#39;)\n    &lt;&#x2F;script&gt;</code></pre>\n\n<h2 id=\"数据渲染-v-show-v-if\"><a href=\"#数据渲染-v-show-v-if\" class=\"headerlink\" title=\"数据渲染 v-show v-if\"></a>数据渲染 v-show v-if</h2><pre class=\"line-numbers language-bush\" data-language=\"bush\"><code class=\"language-bush\">&lt;div id&#x3D;&quot;root&quot;&gt;\n      &lt;!-- 使用v-show做条件渲染  后面接布尔值或者可得到布尔值的表达式\n        底层使用 display 实现  显示与隐藏\n        变化频繁使用 v-show\n         --&gt;\n      &lt;!-- &lt;h2 v-show&#x3D;&quot;false&quot;&gt;欢迎你&#123;&#123;name&#125;&#125;&lt;&#x2F;h2&gt; --&gt;\n      &lt;!-- &lt;h2 v-show&#x3D;&quot;1&#x3D;&#x3D;&#x3D;2&quot;&gt;欢迎你&#123;&#123;name&#125;&#125;&lt;&#x2F;h2&gt; --&gt;\n\n      &lt;!-- 使用v-if做条件渲染  确定不再展示--&gt;\n      &lt;h2 v-if&#x3D;&quot;false&quot;&gt;欢迎你&#123;&#123;name&#125;&#125;&lt;&#x2F;h2&gt;\n\n      &lt;h2&gt;当前N的值为: &#123;&#123;n&#125;&#125;&lt;&#x2F;h2&gt;\n      &lt;button @click&#x3D;&quot;n++&quot;&gt;点我N+1&lt;&#x2F;button&gt;\n      &lt;!-- &lt;div v-show&#x3D;&quot;n&#x3D;&#x3D;&#x3D;1&quot;&gt;Angular&lt;&#x2F;div&gt;\n      &lt;div v-show&#x3D;&quot;n&#x3D;&#x3D;&#x3D;2&quot;&gt;React&lt;&#x2F;div&gt;\n      &lt;div v-show&#x3D;&quot;n&#x3D;&#x3D;&#x3D;3&quot;&gt;Vue&lt;&#x2F;div&gt; --&gt;\n\n      &lt;!-- v-else 和 v-else-if 结构不允许打断中间不能加其他元素 --&gt;\n      &lt;!-- &lt;div v-if&#x3D;&quot;n&#x3D;&#x3D;&#x3D;1&quot;&gt;Angular&lt;&#x2F;div&gt;\n      &lt;div v-else-if&#x3D;&quot;n&#x3D;&#x3D;&#x3D;2&quot;&gt;React&lt;&#x2F;div&gt;\n      &lt;div v-else-if&#x3D;&quot;n&#x3D;&#x3D;&#x3D;3&quot;&gt;Vue&lt;&#x2F;div&gt; --&gt;\n      &lt;!-- n为其他值时都显示优乐美 --&gt;\n      &lt;!-- &lt;div v-else&gt;优乐美&lt;&#x2F;div&gt; --&gt;\n\n       &lt;!-- template只能配合 v-if 使用 不能配合v-show 使用 --&gt;\n      &lt;template v-if&#x3D;&quot;n&#x3D;&#x3D;&#x3D;1 || n&#x3D;&#x3D;&#x3D;2 || n&#x3D;&#x3D;3&quot;&gt;\n        &lt;h2&gt;周一&lt;&#x2F;h2&gt;\n        &lt;h2&gt;周二&lt;&#x2F;h2&gt;\n        &lt;h2&gt;周三&lt;&#x2F;h2&gt;\n      &lt;&#x2F;template&gt;\n\n    &lt;&#x2F;div&gt;\n\n    &lt;script&gt;\n      Vue.config.productionTip &#x3D; false;\n      const vm &#x3D; new Vue(&#123;\n        data() &#123;\n          return &#123;\n            name: &quot;罗浩哲&quot;,\n            n: 0,\n          &#125;;\n        &#125;,\n      &#125;);\n      vm.$mount(&quot;#root&quot;);\n    &lt;&#x2F;script&gt;</code></pre>\n\n<h2 id=\"列表渲染\"><a href=\"#列表渲染\" class=\"headerlink\" title=\"列表渲染\"></a>列表渲染</h2><pre class=\"line-numbers language-bush\" data-language=\"bush\"><code class=\"language-bush\">&lt;div id&#x3D;&quot;root&quot;&gt;\n        &lt;!-- v-for 指令\n        1.用于展示列表数据\n        2.语法 v-for&#x3D;&quot;(item,index) in xxx&quot; :key&#x3D;&#39;index&#39;\n          可遍历 数组  对象  字符串 --&gt;\n      &lt;h2&gt;milk tea&lt;&#x2F;h2&gt;\n      &lt;!-- v-for in&#x2F;of 遍历数组 --&gt;\n      &lt;ul&gt;\n        &lt;!-- &lt;li v-for&#x3D;&quot;t in tea&quot; :key&#x3D;&quot;t.id&quot;&gt;&#123;&#123;t.name&#125;&#125; - &#123;&#123;t.boutique&#125;&#125;&lt;&#x2F;li&gt; --&gt;\n        &lt;!-- v-for 接收两个形参 (t, index) 可自定义 \n        t 为 数组的每一项值 , index 为数组的索引值  --&gt;\n        &lt;li v-for&#x3D;&quot;(t,index) in tea&quot; :key&#x3D;&quot;index&quot;&gt;\n          &#123;&#123;t.name&#125;&#125; - &#123;&#123;t.boutique&#125;&#125;\n        &lt;&#x2F;li&gt;\n      &lt;&#x2F;ul&gt;\n\n      &lt;!-- v-for in&#x2F;of 遍历对象 --&gt;\n      &lt;h2&gt;汽车信息&lt;&#x2F;h2&gt;\n      &lt;ul&gt;\n        &lt;li v-for&#x3D;&quot;(c,index) of car&quot; :key&#x3D;&quot;index&quot;&gt;&#123;&#123;index&#125;&#125; --&#123;&#123;c&#125;&#125;&lt;&#x2F;li&gt;\n      &lt;&#x2F;ul&gt;\n    &lt;&#x2F;div&gt;\n\n    &lt;!-- v-for in&#x2F;of 遍历字符串 指定遍历次数 --&gt;\n    &lt;h2&gt;遍历字符串&lt;&#x2F;h2&gt;\n    &lt;ul&gt;\n      &lt;li v-for&#x3D;&quot;(a,b) in str&quot; :key&#x3D;&quot;b&quot;&gt;&#123;&#123;a&#125;&#125; - &#123;&#123;b&#125;&#125;&lt;&#x2F;li&gt;\n    &lt;&#x2F;ul&gt;\n    &lt;script&gt;\n      const vm &#x3D; new Vue(&#123;\n        data() &#123;\n          return &#123;\n            tea: [\n              &#123; id: &quot;001&quot;, name: &quot;蜜雪冰城&quot;, boutique: &quot;柠檬水&quot; &#125;,\n              &#123; id: &quot;002&quot;, name: &quot;一点点&quot;, boutique: &quot;珍珠奶茶&quot; &#125;,\n              &#123; id: &quot;003&quot;, name: &quot;茶百道&quot;, boutique: &quot;草莓冰沙&quot; &#125;,\n              &#123; id: &quot;004&quot;, name: &quot;古茗&quot;, boutique: &quot;百香双重奏&quot; &#125;,\n            ],\n            car: &#123;\n              name: &quot;奥迪A8&quot;,\n              price: &quot;80&quot;,\n              color: &quot;黑色&quot;,\n            &#125;,\n            str: &quot;hello&quot;,\n          &#125;;\n        &#125;,\n      &#125;);\n      vm.$mount(&quot;#root&quot;);\n    &lt;&#x2F;script&gt;</code></pre>\n\n<h2 id=\"v-if-中key的作用原理-—最好使用id作为key\"><a href=\"#v-if-中key的作用原理-—最好使用id作为key\" class=\"headerlink\" title=\"v-if 中key的作用原理 —最好使用id作为key\"></a>v-if 中key的作用原理 —最好使用id作为key</h2><p><img src=\"/../../images/ca109c2aafd3dc457266e6141ef28397.png\" alt=\"截图\"></p>\n<h2 id=\"列表过滤\"><a href=\"#列表过滤\" class=\"headerlink\" title=\"列表过滤\"></a>列表过滤</h2><pre class=\"line-numbers language-bush\" data-language=\"bush\"><code class=\"language-bush\"> &lt;div id&#x3D;&quot;root&quot;&gt;\n        搜索：&lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;请输入搜索的信息&quot; v-model:value&#x3D;&quot;teaName&quot;&gt;&lt;br&gt;\n        &lt;ul&gt;\n            &lt;li v-for&#x3D;&quot;t in filters&quot; :key&#x3D;&quot;t.id&quot;&gt;\n                &#123;&#123;t.name&#125;&#125; - &#123;&#123;t.boutique&#125;&#125; - &#123;&#123;t.price&#125;&#125;\n            &lt;&#x2F;li&gt;\n            &lt;&#x2F;li&gt;\n        &lt;&#x2F;ul&gt;\n\n    &lt;&#x2F;div&gt;\n&lt;!-- 列表过滤 --模糊搜索---watch实现 --&gt;\n    &lt;!-- &lt;script&gt;\n        \n        Vue.config.productionTip &#x3D; false;\n        const vm &#x3D; new Vue(&#123;\n            data() &#123;\n                return &#123;\n                    teaName: &#39;&#39;,\n                    tea: [\n                        &#123; id: &quot;001&quot;, name: &quot;星巴克&quot;, boutique: &quot;冰美式&quot;, price: &quot;14￥RMB&quot; &#125;,\n                        &#123; id: &quot;002&quot;, name: &quot;蜜雪冰城&quot;, boutique: &quot;柠檬水&quot;, price: &quot;4￥RMB&quot; &#125;,\n                        &#123; id: &quot;003&quot;, name: &quot;一点点&quot;, boutique: &quot;珍珠奶茶&quot;, price: &quot;19￥RMB&quot; &#125;,\n                        &#123; id: &quot;004&quot;, name: &quot;茶百道&quot;, boutique: &quot;草莓冰沙&quot;, price: &quot;19￥RMB&quot; &#125;,\n                        &#123; id: &quot;005&quot;, name: &quot;古茗&quot;, boutique: &quot;百香双重奏&quot;, price: &quot;18￥RMB&quot; &#125;,\n                    ],\n                   filter:[],\n                &#125;\n            &#125;,\n            watch: &#123;\n                teaName:&#123;\n                    immediate: true, \n                    handler(val) &#123;\n                        console.log(&#39;teaName改变了&#39;);\n                    &#x2F;&#x2F;数组过滤a\n                    this.filter &#x3D; this.tea.filter((t) &#x3D;&gt; &#123;\n                        &#x2F;&#x2F;   判断数组是否包含输入的字符 过滤生成新数组\n                        return t.name.indexOf(val) !&#x3D;&#x3D; -1\n                    &#125;)\n                &#125;\n                &#125;\n               \n            &#125;\n        &#125;);\n        vm.$mount(&#39;#root&#39;)\n    &lt;&#x2F;script&gt; --&gt;\n&lt;!-- 列表过滤 --模糊搜索---computed实现 --&gt;  \n    &lt;script&gt;    \n        Vue.config.productionTip &#x3D; false;\n        const vm &#x3D; new Vue(&#123;\n            data() &#123;\n                return &#123;\n                    teaName:&#39;&#39;,\n                    tea: [\n                        &#123; id: &quot;001&quot;, name: &quot;星巴克&quot;, boutique: &quot;冰美式&quot;, price: &quot;14￥RMB&quot; &#125;,\n                        &#123; id: &quot;002&quot;, name: &quot;蜜雪冰城&quot;, boutique: &quot;柠檬水&quot;, price: &quot;4￥RMB&quot; &#125;,\n                        &#123; id: &quot;003&quot;, name: &quot;一点点&quot;, boutique: &quot;珍珠奶茶&quot;, price: &quot;19￥RMB&quot; &#125;,\n                        &#123; id: &quot;004&quot;, name: &quot;茶百道&quot;, boutique: &quot;草莓冰沙&quot;, price: &quot;19￥RMB&quot; &#125;,\n                        &#123; id: &quot;005&quot;, name: &quot;古茗&quot;, boutique: &quot;百香双重奏&quot;, price: &quot;18￥RMB&quot; &#125;,\n                    ],   \n                &#125;\n            &#125;,\n           computed:&#123;\n                 filters() &#123;\n                    &#x2F;&#x2F; 数组过滤  t为数组的每一项\n                    return this.tea.filter((t) &#x3D;&gt;&#123;\n                        &#x2F;&#x2F; 判断数组是否存在 输入搜索的值 即值不为-1\n                        return t.name.indexOf(this.teaName) !&#x3D;&#x3D; -1\n                    &#125;)\n                 &#125;\n           &#125;\n        &#125;);\n        vm.$mount(&#39;#root&#39;)\n    &lt;&#x2F;script&gt;\n</code></pre>\n\n<h2 id=\"列表排序\"><a href=\"#列表排序\" class=\"headerlink\" title=\"列表排序\"></a>列表排序</h2><pre class=\"line-numbers language-bush\" data-language=\"bush\"><code class=\"language-bush\">&lt;div id&#x3D;&quot;root&quot;&gt;\n        &lt;h2&gt;奶茶列表&lt;&#x2F;h2&gt;\n        &lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;请输入店铺名&quot; v-model:value&#x3D;&quot;teaName&quot;&gt;\n        &lt;button @click&#x3D;&quot;sortType &#x3D; 2&quot;&gt;价格升序&lt;&#x2F;button&gt;\n        &lt;button @click&#x3D;&quot;sortType &#x3D; 1&quot;&gt;价格降序&lt;&#x2F;button&gt;\n        &lt;button @click&#x3D;&quot;sortType &#x3D; 0&quot;&gt;原顺序&lt;&#x2F;button&gt;\n        &lt;ul&gt;\n            &lt;li v-for&#x3D;&quot;t in filters&quot; :key&#x3D;&quot;t.id&quot;&gt;\n                &#123;&#123;t.name&#125;&#125; - &#123;&#123;t.boutique&#125;&#125; - &#123;&#123;t.price&#125;&#125;\n            &lt;&#x2F;li&gt;\n            &lt;&#x2F;li&gt;\n        &lt;&#x2F;ul&gt;\n\n    &lt;&#x2F;div&gt;\n\n&lt;!-- 列表过滤 --模糊搜索---computed实现 --&gt;  \n    &lt;script&gt;    \n        Vue.config.productionTip &#x3D; false;\n        const vm &#x3D; new Vue(&#123;\n            data() &#123;\n                return &#123;\n                    sortType: &#39;0&#39;, &#x2F;&#x2F;0为原顺序 1为降序 2为升序\n                    teaName:&#39;&#39;,\n                    tea: [\n                        &#123; id: &quot;001&quot;, name: &quot;星巴克&quot;, boutique: &quot;冰美式&quot;, price: &quot;14&quot; &#125;,\n                        &#123; id: &quot;002&quot;, name: &quot;蜜雪冰城&quot;, boutique: &quot;柠檬水&quot;, price: &quot;4&quot; &#125;,\n                        &#123; id: &quot;003&quot;, name: &quot;一点点&quot;, boutique: &quot;珍珠奶茶&quot;, price: &quot;19&quot; &#125;,\n                        &#123; id: &quot;004&quot;, name: &quot;茶百道&quot;, boutique: &quot;草莓冰沙&quot;, price: &quot;19&quot; &#125;,\n                        &#123; id: &quot;005&quot;, name: &quot;古茗&quot;, boutique: &quot;百香双重奏&quot;, price: &quot;18&quot; &#125;,\n                    ],   \n                &#125;\n            &#125;,\n           computed:&#123;\n                 filters() &#123;\n                    &#x2F;&#x2F; 数组过滤  t为数组的每一项\n                    const arr &#x3D; this.tea.filter((t) &#x3D;&gt;&#123;\n                        &#x2F;&#x2F; 判断数组是否存在 输入搜索的值 即值不为-1\n                        return t.name.indexOf(this.teaName) !&#x3D;&#x3D; -1\n                    &#125;)\n                    &#x2F;&#x2F; 判断模糊搜索过滤后的数据是否需要价格排序\n                    if(this.sortType)&#123;\n                       arr.sort((p1,p2) &#x3D;&gt; &#123;\n                         return this.sortType &#x3D;&#x3D;&#x3D; 1 ?  p1.price - p2.price : p2.price - p1.price;\n                       &#125;)  \n                    &#125;\n                    return arr\n                 &#125;\n           &#125;\n        &#125;);\n        vm.$mount(&#39;#root&#39;)\n    &lt;&#x2F;script&gt;\n</code></pre>\n\n<h2 id=\"内置指令\"><a href=\"#内置指令\" class=\"headerlink\" title=\"内置指令\"></a>内置指令</h2><pre class=\"line-numbers language-bush\" data-language=\"bush\"><code class=\"language-bush\">&lt;!-- 内置指令  简写            描述\n             v-bind:   :             单向数据绑定\n            v-model: 省略后面的value  双向数据绑定\n              v-for                 遍历数组、对象、字符串\n              v-on     @            绑定事件监听\n              v-if                  条件渲染（动态控制节点是否存在）\n              v-else               条件渲染（动态控制节点是否存在）\n              v-show               条件渲染（动态控制节点是否展示）\n              v-test                向其所在的节点中渲染文本内容\n              v-html               向指定的节点中渲染包含html结构的内容\n             v-cloak               配合css使用可以解决网速慢时页面展示问题\n             v-once                所在节点在初次动态渲染后，就视为静态内容了\n             v-pre                 跳过其所在节点的编译过程\n            --&gt;\n            \n            &lt;!-- v-html指令\n            1.作用: 向指定的节点中渲染包含html结构的内容\n            2.与插值语法的区别\n                 2.1 v-html会替换掉节点的所有内容，&#123;&#123;xx&#125;&#125; 则不会\n                 2.2 v-html 可以识别html结构\n            3.严重注意： v-html有安全性问题！！！！\n                 3.1 在网站上动态喧嚷任意的html是非常危险的，容易导致攻击\n                 3.2 一定要在可信内容上使用v-html 永远不要用在用户提交的内容上\n\n            --&gt;\n            \n            &lt;!-- v-cloak (没有值)\n                1.本质上是一个特殊属性 Vue实例创建容器并接管以后会自动移除v-cloak属性\n                2.配合css使用可以解决网速慢时页面展示问题\n                 \n            --&gt;\n\n\n            &lt;!-- v-once 指令\n                1.v-once 所在节点在初次动态渲染后，就视为静态内容了\n                2.以后数据的改变不会引起v-once所在节点的更新 可以用于优化性能\n\n                \n            --&gt;\n    \n            &lt;!-- v-pre 指令\n               1.跳过其所在节点的编译过程\n               2.可利用它跳过没有使用指令语法没有使用插值语法的节点 会加快编译\n            \n            \n            --&gt;\n\n\n           &lt;p&gt;&#123;&#123;name&#125;&#125;&lt;&#x2F;p&gt;\n            &lt;!-- v-text  不支持结构解析标签里面不可以再写东西了 --&gt;\n            &lt;p v-text&#x3D;&quot;name&quot;&gt;&lt;&#x2F;p&gt;\n    \n            &lt;!-- &lt;v-html&gt;  支持结构解析 --&gt;\n            &lt;div v-html&#x3D;&quot;str&quot;&gt;&lt;&#x2F;div&gt;\n            &lt;!-- v-html 安全性问题演示 --&gt;\n            &lt;div v-html&#x3D;&quot;str2&quot;&gt;&lt;&#x2F;div&gt;\n\n            &lt;!-- v-cloak 没有值配合css使用--&gt;\n            &lt;p v-cloak&gt;&#123;&#123;name&#125;&#125;&lt;&#x2F;p&gt;\n            &lt;!-- &lt;style&gt;\n                [v-cloak]&#123;\n                    display: none;\n                &#125;\n            &lt;&#x2F;style&gt; --&gt;\n           \n            &lt;!-- v-once 演示 --&gt;\n            &lt;p v-once&gt;初始化的n值是: &#123;&#123;n&#125;&#125;&lt;&#x2F;p&gt;\n            &lt;p&gt;当前的n值是:&#123;&#123;n&#125;&#125;&lt;&#x2F;p&gt;\n             &lt;button @click&#x3D;&quot;n++&quot;&gt;点我N加1&lt;&#x2F;button&gt;\n\n\n\n        &lt;&#x2F;div&gt;\n    &lt;script&gt;\n        const vm &#x3D; new Vue(&#123;\n            data() &#123;\n                return &#123;\n                    n: 1,\n                   name: &#39;罗浩哲&#39;,\n                   str: &#39;&lt;h3&gt;你好嘢？&lt;&#x2F;h3&gt;&#39;,\n                   str2: &#39;&lt;a href&#x3D;&quot;javascript:location.href&#x3D;&quot;https:&#x2F;&#x2F;www.baidu.com?+documnet.cookie&quot;&gt;诱惑性内容&lt;&#x2F;a&gt;&#39;,\n                &#125;\n            &#125;,\n        &#125;);\n        vm.$mount(&#39;#root&#39;)\n    &lt;&#x2F;script&gt;</code></pre>\n\n<h2 id=\"自定义指令\"><a href=\"#自定义指令\" class=\"headerlink\" title=\"自定义指令\"></a>自定义指令</h2><pre class=\"line-numbers language-bush\" data-language=\"bush\"><code class=\"language-bush\">&lt;!-- 自定义指令\n        备注：\n        1.指令定义式不加 v- 但使用时一定要加v-\n        2.指令名如果是多个单词要使用kebab-casass中间使用 - 连接 分割  定义时 要加上 &#39;&#39;\n    --&gt;\n    &lt;!-- 案例需求 \n     1.定义一个v-big 指令 和v-text功能类似 但会把绑定的数值放大10倍\n     2.定义一个v-fbind指令 和bind 指令功能类似 但会把其所绑定的input元素默认获取焦点\n    --&gt;\n\n    &lt;div id&#x3D;&quot;root&quot;&gt;\n\n      &lt;h2&gt; 当前的N值是:&lt;span v-text&#x3D;&quot;n&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt; \n      &lt;h2&gt; 放大十倍的N值是:&lt;span v-big&#x3D;&quot;n&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt; \n       &lt;button @click&#x3D;&quot;n++&quot;&gt;点我N+1&lt;&#x2F;button&gt;\n       &lt;hr&gt;\n       &lt;input type&#x3D;&quot;text&quot; v-fbind:value&#x3D;&quot;n&quot;&gt;\n    &lt;&#x2F;div&gt;\n\n    &lt;script&gt;\n        Vue.config.productionTip &#x3D; false;\n        &#x2F;&#x2F;全局自定义指令\n        Vue.directive(&#39;fbind&#39;,&#123;\n            &#x2F;&#x2F;当指令与元素成功绑定时调用\n            bind(element,binding) &#123;  \n                    console.log(&#39;bind&#39;);\n                    element.value &#x3D; binding.value\n                   &#125;,\n                    &#x2F;&#x2F;指令元素被插入页面时调用\n                   inserted(element,binding)&#123;\n                    console.log(&#39;inserted&#39;); \n                      element.focus()\n                   &#125;,\n                   &#x2F;&#x2F;当指令所在模板重新解析时调用\n                   update(element,binding) &#123;\n                    console.log(&#39;update&#39;);\n                    element.value &#x3D; binding.value\n                   &#125;,\n        &#125;)\n        const vm &#x3D; new Vue(&#123;\n            data() &#123;\n                return &#123;\n                   n: 1,\n                &#125;\n            &#125;,\n            &#x2F;&#x2F;局部自定义指令\n            directives:&#123;\n                &#x2F;&#x2F;函数式写法\n                &#x2F;&#x2F; big 函数什么时候被调用  \n                &#x2F;&#x2F; 1.当指令与元素成功绑定是调用\n                &#x2F;&#x2F; 2.指令所在的模板重新解析时调用\n                big(element,binding)&#123;  \n                 console.log(element); &#x2F;&#x2F;真实DOM span标签\n                 console.log(binding); &#x2F;&#x2F;对象 value为 传入的值n\n                 element.innerText &#x3D; binding.value * 10\n                &#125;,\n\n                &#x2F;&#x2F;对象式写法\n                fbind:&#123;\n                    &#x2F;&#x2F;当指令与元素成功绑定时调用\n                   bind(element,binding) &#123;  \n                    console.log(&#39;bind&#39;);\n                    element.value &#x3D; binding.value\n                   &#125;,\n                    &#x2F;&#x2F;指令元素被插入页面时调用\n                   inserted(element,binding)&#123;\n                    console.log(&#39;inserted&#39;); \n                      element.focus()\n                   &#125;,\n                   &#x2F;&#x2F;当指令所在模板重新解析时调用\n                   update(element,binding) &#123;\n                    console.log(&#39;update&#39;);\n                    element.value &#x3D; binding.value\n                   &#125;,\n\n                &#125;\n            &#125;\n        &#125;);\n        vm.$mount(&#39;#root&#39;)\n    &lt;&#x2F;script&gt;</code></pre>\n\n<h2 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h2><pre class=\"line-numbers language-bush\" data-language=\"bush\"><code class=\"language-bush\">&lt;!-- 生命周期:\n       1.又名生命周期回调函数&#x2F;生命周期函数&#x2F;生命周期钩子，\n       2.是什么:Vue在关键时期帮我们调了一些特殊名称的函数\n       3.生命周期函数的名字不可更改，但具体的函数内容根据需求编写\n       4.生命周期函数的this指向是vm或组件实例对象\n\n       常用的生命周期钩子\n       1.mounted 发送ajax请求 、启动定时器、绑定自定义事件 、订阅消息等【初始化操作】\n       2.beforeDestroy：清除定时器 、解绑自定义事件、取消订阅消息等【收尾工作】\n\n       关于销毁Vue实例\n       1.销毁后借助Vue开发者工具看不到任何信息\n       2.销毁后自定义事件会失效，但原生DOM事件依旧有效\n       3.一般不会在beforeDestroy操作数据 应为即使操作了数据也不会再更新了\n       \n   --&gt;\n\n   &lt;div id&#x3D;&quot;root&quot;&gt;\n       &lt;!-- 引出生命周期 --&gt;\n       &lt;h2 :style&#x3D;&quot;&#123;opacity&#125;&quot;&gt;Hello word&lt;&#x2F;h2&gt;\n\n       &lt;!-- 分析生命周期 --&gt;\n        &lt;h2&gt;当前的N值是:&#123;&#123;n&#125;&#125;&lt;&#x2F;h2&gt;\n        &lt;button @click&#x3D;&quot;n++&quot;&gt;点我N+1&lt;&#x2F;button&gt;\n         \n        &lt;button @click&#x3D;&quot;bye&quot;&gt;点我销毁vm&lt;&#x2F;button&gt;\n   &lt;&#x2F;div&gt;\n\n\n   &lt;script&gt;\n   Vue.config.productionTip &#x3D; false;\n   const vm &#x3D; new Vue(&#123;\n       el: &#39;#root&#39;,\n       data:&#123;\n            n: 1,\n         name: &#39;罗浩哲&#39;,\n         opacity: 1  \n       &#125;,\n       methods: &#123;\n           bye()&#123;\n               console.log(&#39;bye&#39;);\n               &#x2F;&#x2F; 销毁\n               this.$destroy()\n           &#125;\n       &#125;,\n       watch:&#123;\n          n()&#123;\n          console.log(&#39;n的值比变了&#39;);\n          &#125;\n       &#125;,\n       beforeCreate() &#123;\n           console.log(&#39;beforeCreate&#39;);\n           &#x2F;&#x2F; console.log(this)\n           &#x2F;&#x2F; debugger;&#x2F;&#x2F;断点\n       &#125;,\n       created() &#123;\n           console.log(&#39;create&#39;);\n           &#x2F;&#x2F; console.log(this)\n           &#x2F;&#x2F; debugger;&#x2F;&#x2F;断点\n       &#125;,\n       beforeMount() &#123;\n           console.log(&#39;beforeMount&#39;);\n           console.log(this)\n           debugger;&#x2F;&#x2F;断点\n       &#125;,\n       &#x2F;&#x2F;mounted（）在Vue完成模板解析并把初的真实的DOm放入页面（挂载完毕）后调用\n       mounted() &#123;\n           &#x2F;&#x2F;定时器\n          this.timer &#x3D;  setInterval(() &#x3D;&gt; &#123;\n         this.opacity -&#x3D; 0.01\n         if(this.opacity &lt;&#x3D; 0) this.opacity &#x3D; 1\n    &#125;,16) \n       &#125;,\n       beforeUpdate() &#123;\n           console.log(&#39;beforeUpdate&#39;)\n           \n       &#125;,\n      updated() &#123;\n           console.log(&#39;updated&#39;)\n      &#125;,\n      beforeDestroy() &#123;\n       &#x2F;&#x2F;   清除定时器\n      clearInterval(this.timer) \n       console.log(&#39;beforeDestroy&#39;)\n       \n      &#125;,\n      destroyed() &#123;\n       console.log(&#39;destroyed&#39;)\n       \n      &#125;,\n    &#125;)\n    \n    \n   &lt;&#x2F;script&gt;</code></pre>\n\n<p><img src=\"/../../images/f0ca1065da770c3fc1b06a15b65c770b.png\" alt=\"截图\"></p>\n<h2 id=\"非单文件组件\"><a href=\"#非单文件组件\" class=\"headerlink\" title=\"非单文件组件\"></a>非单文件组件</h2><pre class=\"line-numbers language-bush\" data-language=\"bush\"><code class=\"language-bush\">&lt;!-- Vue 中使用组件的三大步骤\n       一、创建组件（定义组件）\n          1. 如何定义\n          使用Vue.extend(options)创建其中option是和new Vue(options)\n          时传入的那么options几乎一致 两个区别\n             1.el 不要写 最终的组件毒药被一个vm所管理 由vm中的决定服务那个容器\n             2.data必须写成函数形式  ----避免组件被复用时，数据存在引用关系\n             备注： 使用template可以配置组件结构\n\n\n       二、注册组件（局部&#x2F;全局）\n          1.局部注册：靠new Vue 的时候配置 components 选项\n          2.全局注册：靠Vue.component(&#39;组件名&#39;,&#39;组件&#39;)\n\n\n       三、使用组件（通过组件标签）\n         &lt;组件名 &#x2F;&gt;\n       \n    --&gt;\n    \n    &lt;div id&#x3D;&quot;root&quot;&gt;\n         &lt;school&gt;&lt;&#x2F;school&gt;\n         &lt;hr&gt;\n         &lt;student&gt;&lt;&#x2F;student&gt;\n    &lt;&#x2F;div&gt;\n \n  \n   &lt;script&gt;\n      &#x2F;&#x2F;创建school组件\n      const school &#x3D; Vue.extend(&#123;\n         template: &#96;\n         &lt;div&gt;\n         &lt;h2&gt;学校名称：&#123;&#123;schoolName&#125;&#125;&lt;&#x2F;h2&gt;\n         &lt;h2&gt;学校地址： &#123;&#123;Address&#125;&#125;&lt;&#x2F;h2&gt;  \n         &lt;&#x2F;div&gt;&#96;,\n         data() &#123;\n            return &#123;\n               schoolName: &#39;合肥八中&#39;,\n               Address:&#39;安徽合肥&#39;\n            &#125;\n         &#125;,\n      &#125;)\n      \n     &#x2F;&#x2F;创建student组件\n     const student &#x3D; Vue.extend(&#123;\n      template: &#96;\n      &lt;div&gt;\n         &lt;h2&gt;学生姓名：&#123;&#123;studentName&#125;&#125;&lt;&#x2F;h2&gt;\n         &lt;h2&gt;学生年龄： &#123;&#123;age&#125;&#125;&lt;&#x2F;h2&gt;  \n      &lt;&#x2F;div&gt;\n         &#96;,\n          data() &#123;\n            return &#123;\n               studentName: &#39;罗浩哲&#39;,\n               age: 18\n            &#125;\n          &#125;,\n     &#125;)\n\n      new Vue(&#123;\n         el:&#39;#root&#39;,\n         components:&#123;\n            school,\n            student\n         &#125;\n      &#125;)\n   &lt;&#x2F;script&gt;</code></pre>\n\n<h2 id=\"VueComponent\"><a href=\"#VueComponent\" class=\"headerlink\" title=\"VueComponent\"></a>VueComponent</h2><pre class=\"line-numbers language-bush\" data-language=\"bush\"><code class=\"language-bush\">&lt;!-- 关于VueComponent\n        1.school: 本质上是一个名为VueComponent的构造函数，且不是程序员定义的是Vue.extend自动生成的\n\n        2.我们只需要写&lt;school&gt; Vue解析会自动帮我们创建school组件的实例对象\n            即Vue帮我们执行的 new VueComponent(options)\n\n        3.特别注意 每次调用Vue.extend 返回的都是全新的VueComponent！！！！\n\n        4.关于this的指向\n        （1）组件配置中\n             data函数 methods函数 watch函数 computed函数 中this的指向均为 VueComponent 实例对象\n\n        （2）new Vue（options）配置中\n            data函数 methods函数 watch函数 computed函数中他们的this均指向 vue实例对象\n\n        5. VueComponent的实例对象 以后简称vc 也可以称为组件实例对象\n        vue的实例对象以后简称为vm\n    \n    --&gt;\n\n    \n    &lt;div id&#x3D;&quot;root&quot;&gt;\n       &lt;school&gt;&lt;&#x2F;school&gt;\n    &lt;&#x2F;div&gt;\n \n  \n   &lt;script&gt;\n\n      &#x2F;&#x2F;创建school组件\n      const school &#x3D; Vue.extend(&#123;\n         template: &#96;\n         &lt;div&gt;\n         &lt;h2&gt;学校名称：&#123;&#123;schoolName&#125;&#125;&lt;&#x2F;h2&gt;\n         &lt;h2&gt;学校地址： &#123;&#123;Address&#125;&#125;&lt;&#x2F;h2&gt;  \n         \n         &lt;&#x2F;div&gt;&#96;,\n         data() &#123;\n            return &#123;\n               schoolName: &#39;合肥八中&#39;,\n               Address:&#39;安徽合肥&#39;\n            &#125;\n         &#125;,\n      &#125;)\n      \n     console.log(school);\n\n      new Vue(&#123;\n         el:&#39;#root&#39;,\n         components:&#123;\n            school\n         &#125;\n      &#125;)\n   &lt;&#x2F;script&gt;\n</code></pre>\n\n<h2 id=\"一个重要的内置属性\"><a href=\"#一个重要的内置属性\" class=\"headerlink\" title=\"一个重要的内置属性\"></a>一个重要的内置属性</h2><pre class=\"line-numbers language-bush\" data-language=\"bush\"><code class=\"language-bush\">Vue.Component._prototype.__proto__ &#x3D;&#x3D;&#x3D; Vue.prototype\n      为什么要有这个关系 让组件实例对象（vc）可以访问到Vue原型上的属性和方法</code></pre>\n\n<h2 id=\"nanoid使用\"><a href=\"#nanoid使用\" class=\"headerlink\" title=\"nanoid使用\"></a>nanoid使用</h2><pre class=\"line-numbers language-bush\" data-language=\"bush\"><code class=\"language-bush\">1.安装\nnpm  i nanoid\n2.引入\nimport &#123;nanoid&#125; from &#39;nanoid&#39;\n3.使用\nconst personObj &#x3D; &#123;id:nanoid(),name:this.name&#125;;</code></pre>","text":"学习Vue之前要掌握的JavaScript:基础知识？ES6语法规范&#x2F;ES6模块化 1.默认导入与默认导出（一个文件只能使用一次默认导出） export default import 别名(随意符合规范) from &#39;文件地址&#39; 2.按需导入和按需导出（...","link":"","photos":[],"count_time":{"symbolsCount":"43k","symbolsTime":"39 mins."},"categories":[],"tags":[{"name":"Vue","slug":"Vue","count":1,"path":"api/tags/Vue.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AD%A6%E4%B9%A0Vue%E4%B9%8B%E5%89%8D%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84JavaScript-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%9F\"><span class=\"toc-text\">学习Vue之前要掌握的JavaScript:基础知识？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ES6%E8%AF%AD%E6%B3%95%E8%A7%84%E8%8C%83-x2F-ES6%E6%A8%A1%E5%9D%97%E5%8C%96\"><span class=\"toc-text\">ES6语法规范&#x2F;ES6模块化</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8webpack\"><span class=\"toc-text\">包管理器webpack</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8A%80%E6%9C%AF%E6%A0%88\"><span class=\"toc-text\">技术栈</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A-el%E5%92%8Cdata%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%86%99%E6%B3%95\"><span class=\"toc-text\">数据绑定 el和data的两种写法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#MVVM%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">MVVM模型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Object-defineProperty-%E5%9B%9E%E9%A1%BE\"><span class=\"toc-text\">Object.defineProperty 回顾</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86\"><span class=\"toc-text\">数据代理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">事件的基本使用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6\"><span class=\"toc-text\">事件修饰符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">键盘事件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">计算属性</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%9B%91%E8%A7%86%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">监视属性</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B7%B1%E5%BA%A6%E7%9B%91%E8%A7%86\"><span class=\"toc-text\">深度监视</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%9B%91%E8%A7%86%E7%AE%80%E5%86%99\"><span class=\"toc-text\">数据监视简写</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#computed-%E5%92%8C-watch-%E7%9A%84%E5%AF%B9%E6%AF%94\"><span class=\"toc-text\">computed 和 watch 的对比</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#class%E6%A0%B7%E5%BC%8F%E7%BB%91%E5%AE%9A-style%E6%A0%B7%E5%BC%8F%E7%BB%91%E5%AE%9A\"><span class=\"toc-text\">class样式绑定 style样式绑定</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E6%B8%B2%E6%9F%93-v-show-v-if\"><span class=\"toc-text\">数据渲染 v-show v-if</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93\"><span class=\"toc-text\">列表渲染</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#v-if-%E4%B8%ADkey%E7%9A%84%E4%BD%9C%E7%94%A8%E5%8E%9F%E7%90%86-%E2%80%94%E6%9C%80%E5%A5%BD%E4%BD%BF%E7%94%A8id%E4%BD%9C%E4%B8%BAkey\"><span class=\"toc-text\">v-if 中key的作用原理 —最好使用id作为key</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%97%E8%A1%A8%E8%BF%87%E6%BB%A4\"><span class=\"toc-text\">列表过滤</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%97%E8%A1%A8%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">列表排序</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%86%85%E7%BD%AE%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">内置指令</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">自定义指令</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\"><span class=\"toc-text\">生命周期</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9D%9E%E5%8D%95%E6%96%87%E4%BB%B6%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">非单文件组件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#VueComponent\"><span class=\"toc-text\">VueComponent</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E4%B8%AA%E9%87%8D%E8%A6%81%E7%9A%84%E5%86%85%E7%BD%AE%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">一个重要的内置属性</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#nanoid%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">nanoid使用</span></a></li></ol></li></ol>","author":{"name":"Luo","slug":"blog-author","avatar":"https://w.wallhaven.cc/full/vq/wallhaven-vqdpzm.jpg","link":"/","description":"一名00后码农 <br /> @ <b>公众号：四夕白水</b>","socials":{"github":"https://github.com/TriDiamond","twitter":"","stackoverflow":"https://stackoverflow.org.cn/","wechat":"","qq":"","weibo":"https://weibo.com/","zhihu":"https://www.zhihu.com/","csdn":"","juejin":"https://juejin.cn/user/settings/profile","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/1541391754?spm_id_from=333.788.0.0"},"baidu":{"icon":"iconfont icon-baidu","link":"https://space.bilibili.com/1541391754?spm_id_from=333.788.0.0"},"book":{"icon":"far fa-address-book","link":"https://space.bilibili.com/1541391754?spm_id_from=333.788.0.0"}}}},"mapped":true,"prev_post":{"title":"Vue","uid":"5f258f833478a2a0e21ce42d19305683","slug":"serve/服务器","date":"2023-08-09T08:19:45.000Z","updated":"2023-08-10T01:31:00.353Z","comments":true,"path":"api/articles/serve/服务器.json","keywords":null,"cover":"/medias/g.jpg","text":"客户端与服务器服务器在上网过程中负责存放和提供资源的电脑URL组成部分 客户端与服务器之间的通信协议 存在该资源的服务器的名称 资源在服务器上具体的存在位置 客户端与服务器的通信过程请求——处理——响应什么是AJAX在网页中利用XMLHttpRequest对象和服务器进行数据交互...","link":"","photos":[],"count_time":{"symbolsCount":248,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Serve","slug":"Serve","count":1,"path":"api/tags/Serve.json"}],"author":{"name":"Luo","slug":"blog-author","avatar":"https://w.wallhaven.cc/full/vq/wallhaven-vqdpzm.jpg","link":"/","description":"一名00后码农 <br /> @ <b>公众号：四夕白水</b>","socials":{"github":"https://github.com/TriDiamond","twitter":"","stackoverflow":"https://stackoverflow.org.cn/","wechat":"","qq":"","weibo":"https://weibo.com/","zhihu":"https://www.zhihu.com/","csdn":"","juejin":"https://juejin.cn/user/settings/profile","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/1541391754?spm_id_from=333.788.0.0"},"baidu":{"icon":"iconfont icon-baidu","link":"https://space.bilibili.com/1541391754?spm_id_from=333.788.0.0"},"book":{"icon":"far fa-address-book","link":"https://space.bilibili.com/1541391754?spm_id_from=333.788.0.0"}}}}},"next_post":{}}